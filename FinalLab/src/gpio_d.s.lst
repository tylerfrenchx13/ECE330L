   1              	# file: gpio_d.s
   2              	# author: Justin Johnson, Tyler French
   3              	# team w4
   4              	
   5              	.include "macros.inc"
   1              	# file: macros.inc
   2              	
  34              	  .list
   6              	.include "src/gpio_regs.inc"
   1              	# file: gpio_regs.inc
   2              	# team w4
   3              	# author: Justin Johnson, Tyler French
   4              	
   5              		.equ GPIOA_BASE, 0x40020000
   6              		.equ GPIOB_BASE, 0x40020400
   7              		.equ GPIOC_BASE, 0x40020800
   8              		.equ GPIOD_BASE, 0x40020c00
   9              		.equ GPIOE_BASE, 0x40021000
  10              	
  11              		.equ GPIO_MODER, 0x00
  12              		.equ GPIO_OTYPER, 0x04
  13              		.equ GPIO_OSPEEDR, 0x08
  14              		.equ GPIO_PUPDR, 0x0c
  15              		.equ GPIO_IDR, 0x10
  16              		.equ GPIO_ODR, 0x14
  17              		.equ GPIO_BSRR, 0x18
  18              		.equ GPIO_LCKR, 0x1c
  19              		.equ GPIO_AFRL, 0x20
  20              		.equ GPIO_AFRH, 0x24
  21              	
  22              	
   7              	
   8              	  SET_TARGET
   9              	
  10              	  .text
  11              	
  12              	  FUNCTION gpio_d_init,global
  13              	
  14 0000 00B5     	    push {lr}
  15              	
  16 0002 4FF00300 			mov r0,#3						//send 3 as arg to rcc function
  17 0006 FFF7FEFF 			bl rcc_gpio_enable				//call rcc function
  18              	
  19 000a 064B     			ldr r3, =#GPIOD_BASE			//load r3 with the base address of PORT D
  20              	
  21 000c 064A     			ldr r2, =#0x00000000			//load 0 into r2
  22 000e DA60     			str r2,[r3,#GPIO_PUPDR]			//write Port D PUPDR register as no pull-up, no pull-down
  23 0010 5A60     			str r2,[r3,#GPIO_OTYPER]		//write Port D OTYPER register as reset state
  24 0012 5A61     			str r2,[r3,#GPIO_ODR]			//write 0 to GPIO Port D output data register
  25              	
  26 0014 054A     			ldr r2,=#0x55555555				//set all 16 bits of Port D to outputs
  27 0016 1A60     			str r2,[r3,#GPIO_MODER]
  28              	
  29 0018 054A     			ldr r2,=#0xffffffff				//load all ones into r2
  30 001a 9A60     			str r2,[r3,#GPIO_OSPEEDR]		//set Port D SPEEDR register as high speed
  31              	
  32 001c 5DF804EB 			pop {lr}
  33              	
  34 0020 7047     	    bx lr
  35              	  
  36 0022 0000000C 	  ENDFUNC gpio_d_init
  36      02400000 
  36      00005555 
  36      5555FFFF 
  36      FFFF
  37              	
  38              	  FUNCTION gpio_d_put,global
  39              	
  40 0034 00B5     			push {lr}
  41              	
  42 0036 024B     			ldr r3, =#GPIOD_BASE		//load r3 with the base address of Port D
  43              	
  44 0038 5861     			str r0,[r3,#GPIO_ODR]		//write r0 to GPIO Port D output
  45              	
  46 003a 5DF804EB 			pop {lr}
  47              	
  48 003e 7047     			bx lr
  49              	
  50 0040 000C0240 	  ENDFUNC gpio_d_put
  51              	
  52              	  FUNCTION gpio_d_get_current,global
  53              	
  54 0044 00B5     	        push {lr}
  55              	
  56 0046 024B     	        ldr r3,=#GPIOD_BASE         //load r3 with base register address of port D
  57 0048 5869     	        ldr r0,[r3,#GPIO_ODR]       //load r0 (return arg) with GPIO D output data register
  58              	
  59 004a 5DF804EB 	        pop {lr}
  60              	
  61 004e 7047     	        bx lr
  62              	
  63 0050 000C0240 	  ENDFUNC gpio_d_get_current
  64              	
  65              	  .end
DEFINED SYMBOLS
                            *ABS*:00000001 ctxm4
 ./src/gpio_regs.inc:5      *ABS*:40020000 GPIOA_BASE
 ./src/gpio_regs.inc:6      *ABS*:40020400 GPIOB_BASE
 ./src/gpio_regs.inc:7      *ABS*:40020800 GPIOC_BASE
 ./src/gpio_regs.inc:8      *ABS*:40020c00 GPIOD_BASE
 ./src/gpio_regs.inc:9      *ABS*:40021000 GPIOE_BASE
 ./src/gpio_regs.inc:11     *ABS*:00000000 GPIO_MODER
 ./src/gpio_regs.inc:12     *ABS*:00000004 GPIO_OTYPER
 ./src/gpio_regs.inc:13     *ABS*:00000008 GPIO_OSPEEDR
 ./src/gpio_regs.inc:14     *ABS*:0000000c GPIO_PUPDR
 ./src/gpio_regs.inc:15     *ABS*:00000010 GPIO_IDR
 ./src/gpio_regs.inc:16     *ABS*:00000014 GPIO_ODR
 ./src/gpio_regs.inc:17     *ABS*:00000018 GPIO_BSRR
 ./src/gpio_regs.inc:18     *ABS*:0000001c GPIO_LCKR
 ./src/gpio_regs.inc:19     *ABS*:00000020 GPIO_AFRL
 ./src/gpio_regs.inc:20     *ABS*:00000024 GPIO_AFRH
        src/gpio_d.s:12     .text:00000000 gpio_d_init
        src/gpio_d.s:12     .text:00000000 $t
        src/gpio_d.s:36     .text:00000022 $d
        src/gpio_d.s:38     .text:00000034 gpio_d_put
        src/gpio_d.s:38     .text:00000034 $t
        src/gpio_d.s:50     .text:00000040 $d
        src/gpio_d.s:52     .text:00000044 gpio_d_get_current
        src/gpio_d.s:52     .text:00000044 $t
        src/gpio_d.s:63     .text:00000050 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
rcc_gpio_enable
