
bin/systick.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200004a0 	.word	0x200004a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d08 	.word	0x08000d08

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08000d08 	.word	0x08000d08
 80001d8:	200004a4 	.word	0x200004a4
 80001dc:	200004a0 	.word	0x200004a0
 80001e0:	00000000 	.word	0x00000000

080001e4 <main>:
int degh;
int auto_inc=0;
uint32_t val = 0;
int sw = 0;
int main()
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
    adc_init();                   // Initialize the ADC hardware
 80001ea:	f000 fad9 	bl	80007a0 <adc_init>
    seg7_init();                  // Initialize the 7 segment display
 80001ee:	f000 fc21 	bl	8000a34 <seg7_init>
    gpio_d_init();                        //initialize Port D (LEDs)
 80001f2:	f000 fb87 	bl	8000904 <gpio_d_init>
    gpio_c_init();
 80001f6:	f000 fbaf 	bl	8000958 <gpio_c_init>
    SetSysClock();                        //set system clock    
 80001fa:	f000 fa5d 	bl	80006b8 <SetSysClock>
    SysTick_Config(reload_value);         //configure SysTick System Timer
 80001fe:	f640 5021 	movw	r0, #3361	; 0xd21
 8000202:	f000 fb43 	bl	800088c <SysTick_Config>
    
    while(1){
      uint32_t q = 0;             // Initialize any variables needed
 8000206:	2300      	movs	r3, #0
 8000208:	60fb      	str	r3, [r7, #12]
      adc_start();                // Start ADC
 800020a:	f000 fb0f 	bl	800082c <adc_start>
      while (!adc_done()) {
 800020e:	e002      	b.n	8000216 <main+0x32>
        q = q + 1;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	3301      	adds	r3, #1
 8000214:	60fb      	str	r3, [r7, #12]
    SysTick_Config(reload_value);         //configure SysTick System Timer
    
    while(1){
      uint32_t q = 0;             // Initialize any variables needed
      adc_start();                // Start ADC
      while (!adc_done()) {
 8000216:	f000 fb19 	bl	800084c <adc_done>
 800021a:	4603      	mov	r3, r0
 800021c:	f083 0301 	eor.w	r3, r3, #1
 8000220:	b2db      	uxtb	r3, r3
 8000222:	2b00      	cmp	r3, #0
 8000224:	d1f4      	bne.n	8000210 <main+0x2c>
        q = q + 1;
      }
    
      val = adc_get();   // ADC is done; get ADC value (12 bits right justified)
 8000226:	f000 fb25 	bl	8000874 <adc_get>
 800022a:	4602      	mov	r2, r0
 800022c:	4b4d      	ldr	r3, [pc, #308]	; (8000364 <main+0x180>)
 800022e:	601a      	str	r2, [r3, #0]
      val = (val/23) + 180;
 8000230:	4b4c      	ldr	r3, [pc, #304]	; (8000364 <main+0x180>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a4c      	ldr	r2, [pc, #304]	; (8000368 <main+0x184>)
 8000236:	fba2 2303 	umull	r2, r3, r2, r3
 800023a:	091b      	lsrs	r3, r3, #4
 800023c:	33b4      	adds	r3, #180	; 0xb4
 800023e:	4a49      	ldr	r2, [pc, #292]	; (8000364 <main+0x180>)
 8000240:	6013      	str	r3, [r2, #0]

      //Set up Manual/Automatic Mode
      unsigned int switches = *pSWs; //manual/automatic switch
 8000242:	4b4a      	ldr	r3, [pc, #296]	; (800036c <main+0x188>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	60bb      	str	r3, [r7, #8]
      // set up array of 7 segment data to display decimal digits [0-f,m]

      // HEX7 is always blank
      seg7_put(0x7, segs[21]);
 800024a:	4b49      	ldr	r3, [pc, #292]	; (8000370 <main+0x18c>)
 800024c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800024e:	2007      	movs	r0, #7
 8000250:	4619      	mov	r1, r3
 8000252:	f000 fc1f 	bl	8000a94 <seg7_put>
      // HEX6 is always blank
      seg7_put(0x6, segs[21]);
 8000256:	4b46      	ldr	r3, [pc, #280]	; (8000370 <main+0x18c>)
 8000258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800025a:	2006      	movs	r0, #6
 800025c:	4619      	mov	r1, r3
 800025e:	f000 fc19 	bl	8000a94 <seg7_put>

      // HEX5 is Manual/Automatic Mode
      if (testbit(switches,0)){
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	f003 0301 	and.w	r3, r3, #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d006      	beq.n	800027a <main+0x96>
        seg7_put(0x5, segs[16]);
 800026c:	4b40      	ldr	r3, [pc, #256]	; (8000370 <main+0x18c>)
 800026e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000270:	2005      	movs	r0, #5
 8000272:	4619      	mov	r1, r3
 8000274:	f000 fc0e 	bl	8000a94 <seg7_put>
 8000278:	e005      	b.n	8000286 <main+0xa2>
      }
      else{
        seg7_put(0x5, segs[10]);
 800027a:	4b3d      	ldr	r3, [pc, #244]	; (8000370 <main+0x18c>)
 800027c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800027e:	2005      	movs	r0, #5
 8000280:	4619      	mov	r1, r3
 8000282:	f000 fc07 	bl	8000a94 <seg7_put>
      }
      //Up down left or right TODO Both
      seg7_put(0x4, segs[arm]);
 8000286:	4b3b      	ldr	r3, [pc, #236]	; (8000374 <main+0x190>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a39      	ldr	r2, [pc, #228]	; (8000370 <main+0x18c>)
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	2004      	movs	r0, #4
 8000292:	4619      	mov	r1, r3
 8000294:	f000 fbfe 	bl	8000a94 <seg7_put>

      int index;
      //degrees 10th place
      index = (degv/10)%10;
 8000298:	4b37      	ldr	r3, [pc, #220]	; (8000378 <main+0x194>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a37      	ldr	r2, [pc, #220]	; (800037c <main+0x198>)
 800029e:	fb82 1203 	smull	r1, r2, r2, r3
 80002a2:	1092      	asrs	r2, r2, #2
 80002a4:	17db      	asrs	r3, r3, #31
 80002a6:	1ad2      	subs	r2, r2, r3
 80002a8:	4b34      	ldr	r3, [pc, #208]	; (800037c <main+0x198>)
 80002aa:	fb83 1302 	smull	r1, r3, r3, r2
 80002ae:	1099      	asrs	r1, r3, #2
 80002b0:	17d3      	asrs	r3, r2, #31
 80002b2:	1ac9      	subs	r1, r1, r3
 80002b4:	460b      	mov	r3, r1
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	440b      	add	r3, r1
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	607b      	str	r3, [r7, #4]
      seg7_put(0x3, segs[index]);
 80002c0:	4a2b      	ldr	r2, [pc, #172]	; (8000370 <main+0x18c>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c8:	2003      	movs	r0, #3
 80002ca:	4619      	mov	r1, r3
 80002cc:	f000 fbe2 	bl	8000a94 <seg7_put>
      //degrees 1's place
      index = (degv%10);
 80002d0:	4b29      	ldr	r3, [pc, #164]	; (8000378 <main+0x194>)
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	4b29      	ldr	r3, [pc, #164]	; (800037c <main+0x198>)
 80002d6:	fb83 1302 	smull	r1, r3, r3, r2
 80002da:	1099      	asrs	r1, r3, #2
 80002dc:	17d3      	asrs	r3, r2, #31
 80002de:	1ac9      	subs	r1, r1, r3
 80002e0:	460b      	mov	r3, r1
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	440b      	add	r3, r1
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	1ad3      	subs	r3, r2, r3
 80002ea:	607b      	str	r3, [r7, #4]
      seg7_put(0x2, segs[index]);
 80002ec:	4a20      	ldr	r2, [pc, #128]	; (8000370 <main+0x18c>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f4:	2002      	movs	r0, #2
 80002f6:	4619      	mov	r1, r3
 80002f8:	f000 fbcc 	bl	8000a94 <seg7_put>
      //degrees 10th place
      index = (degh/10)%10;
 80002fc:	4b20      	ldr	r3, [pc, #128]	; (8000380 <main+0x19c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a1e      	ldr	r2, [pc, #120]	; (800037c <main+0x198>)
 8000302:	fb82 1203 	smull	r1, r2, r2, r3
 8000306:	1092      	asrs	r2, r2, #2
 8000308:	17db      	asrs	r3, r3, #31
 800030a:	1ad2      	subs	r2, r2, r3
 800030c:	4b1b      	ldr	r3, [pc, #108]	; (800037c <main+0x198>)
 800030e:	fb83 1302 	smull	r1, r3, r3, r2
 8000312:	1099      	asrs	r1, r3, #2
 8000314:	17d3      	asrs	r3, r2, #31
 8000316:	1ac9      	subs	r1, r1, r3
 8000318:	460b      	mov	r3, r1
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	440b      	add	r3, r1
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	1ad3      	subs	r3, r2, r3
 8000322:	607b      	str	r3, [r7, #4]
      seg7_put(0x1, segs[index]);
 8000324:	4a12      	ldr	r2, [pc, #72]	; (8000370 <main+0x18c>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800032c:	2001      	movs	r0, #1
 800032e:	4619      	mov	r1, r3
 8000330:	f000 fbb0 	bl	8000a94 <seg7_put>
      //degrees 1's place
      index = degh%10;
 8000334:	4b12      	ldr	r3, [pc, #72]	; (8000380 <main+0x19c>)
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	4b10      	ldr	r3, [pc, #64]	; (800037c <main+0x198>)
 800033a:	fb83 1302 	smull	r1, r3, r3, r2
 800033e:	1099      	asrs	r1, r3, #2
 8000340:	17d3      	asrs	r3, r2, #31
 8000342:	1ac9      	subs	r1, r1, r3
 8000344:	460b      	mov	r3, r1
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	440b      	add	r3, r1
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	1ad3      	subs	r3, r2, r3
 800034e:	607b      	str	r3, [r7, #4]
      seg7_put(0x0, segs[index]);
 8000350:	4a07      	ldr	r2, [pc, #28]	; (8000370 <main+0x18c>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000358:	2000      	movs	r0, #0
 800035a:	4619      	mov	r1, r3
 800035c:	f000 fb9a 	bl	8000a94 <seg7_put>
        
    }
 8000360:	e751      	b.n	8000206 <main+0x22>
 8000362:	bf00      	nop
 8000364:	200004d0 	.word	0x200004d0
 8000368:	b21642c9 	.word	0xb21642c9
 800036c:	20000004 	.word	0x20000004
 8000370:	20000008 	.word	0x20000008
 8000374:	200004e0 	.word	0x200004e0
 8000378:	200004d8 	.word	0x200004d8
 800037c:	66666667 	.word	0x66666667
 8000380:	200004dc 	.word	0x200004dc

08000384 <SysTick_Handler>:
    return 0;
}

void SysTick_Handler (void)     //ISR - SysTick Interrupt Service Routine
{   
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0

  unsigned int switches = *pSWs; //manual/automatic switch
 800038a:	4b8c      	ldr	r3, [pc, #560]	; (80005bc <SysTick_Handler+0x238>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	607b      	str	r3, [r7, #4]

  //manual mode
  if(testbit(switches,0)){
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	f003 0301 	and.w	r3, r3, #1
 8000398:	2b00      	cmp	r3, #0
 800039a:	f000 80a7 	beq.w	80004ec <SysTick_Handler+0x168>
    count %= 3600;
 800039e:	4b88      	ldr	r3, [pc, #544]	; (80005c0 <SysTick_Handler+0x23c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a88      	ldr	r2, [pc, #544]	; (80005c4 <SysTick_Handler+0x240>)
 80003a4:	fb83 0102 	smull	r0, r1, r3, r2
 80003a8:	185a      	adds	r2, r3, r1
 80003aa:	12d1      	asrs	r1, r2, #11
 80003ac:	17da      	asrs	r2, r3, #31
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80003b4:	fb01 f202 	mul.w	r2, r1, r2
 80003b8:	1a9a      	subs	r2, r3, r2
 80003ba:	4b81      	ldr	r3, [pc, #516]	; (80005c0 <SysTick_Handler+0x23c>)
 80003bc:	601a      	str	r2, [r3, #0]
    //arm1 (LD0) -- left/right
    if(testbit(switches,1)){
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f003 0302 	and.w	r3, r3, #2
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d048      	beq.n	800045a <SysTick_Handler+0xd6>
      arm=23;
 80003c8:	4b7f      	ldr	r3, [pc, #508]	; (80005c8 <SysTick_Handler+0x244>)
 80003ca:	2217      	movs	r2, #23
 80003cc:	601a      	str	r2, [r3, #0]
      hold1 = val;
 80003ce:	4b7f      	ldr	r3, [pc, #508]	; (80005cc <SysTick_Handler+0x248>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	461a      	mov	r2, r3
 80003d4:	4b7e      	ldr	r3, [pc, #504]	; (80005d0 <SysTick_Handler+0x24c>)
 80003d6:	601a      	str	r2, [r3, #0]
      if(count<val){
 80003d8:	4b79      	ldr	r3, [pc, #484]	; (80005c0 <SysTick_Handler+0x23c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	461a      	mov	r2, r3
 80003de:	4b7b      	ldr	r3, [pc, #492]	; (80005cc <SysTick_Handler+0x248>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d208      	bcs.n	80003f8 <SysTick_Handler+0x74>
        *pLEDs |= (1<<0);
 80003e6:	4b7b      	ldr	r3, [pc, #492]	; (80005d4 <SysTick_Handler+0x250>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a7a      	ldr	r2, [pc, #488]	; (80005d4 <SysTick_Handler+0x250>)
 80003ec:	6812      	ldr	r2, [r2, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	f042 0201 	orr.w	r2, r2, #1
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	e007      	b.n	8000408 <SysTick_Handler+0x84>
      } else {
        *pLEDs &= ~(1<<0);
 80003f8:	4b76      	ldr	r3, [pc, #472]	; (80005d4 <SysTick_Handler+0x250>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a75      	ldr	r2, [pc, #468]	; (80005d4 <SysTick_Handler+0x250>)
 80003fe:	6812      	ldr	r2, [r2, #0]
 8000400:	6812      	ldr	r2, [r2, #0]
 8000402:	f022 0201 	bic.w	r2, r2, #1
 8000406:	601a      	str	r2, [r3, #0]
      }

      if(count<hold2){
 8000408:	4b6d      	ldr	r3, [pc, #436]	; (80005c0 <SysTick_Handler+0x23c>)
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	4b72      	ldr	r3, [pc, #456]	; (80005d8 <SysTick_Handler+0x254>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	429a      	cmp	r2, r3
 8000412:	da08      	bge.n	8000426 <SysTick_Handler+0xa2>
        *pLEDs |= (1<<1);
 8000414:	4b6f      	ldr	r3, [pc, #444]	; (80005d4 <SysTick_Handler+0x250>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a6e      	ldr	r2, [pc, #440]	; (80005d4 <SysTick_Handler+0x250>)
 800041a:	6812      	ldr	r2, [r2, #0]
 800041c:	6812      	ldr	r2, [r2, #0]
 800041e:	f042 0202 	orr.w	r2, r2, #2
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	e007      	b.n	8000436 <SysTick_Handler+0xb2>
      } else {
        *pLEDs &= ~(1<<1);
 8000426:	4b6b      	ldr	r3, [pc, #428]	; (80005d4 <SysTick_Handler+0x250>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a6a      	ldr	r2, [pc, #424]	; (80005d4 <SysTick_Handler+0x250>)
 800042c:	6812      	ldr	r2, [r2, #0]
 800042e:	6812      	ldr	r2, [r2, #0]
 8000430:	f022 0202 	bic.w	r2, r2, #2
 8000434:	601a      	str	r2, [r3, #0]
      }
      degh = val - 270;
 8000436:	4b65      	ldr	r3, [pc, #404]	; (80005cc <SysTick_Handler+0x248>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800043e:	461a      	mov	r2, r3
 8000440:	4b66      	ldr	r3, [pc, #408]	; (80005dc <SysTick_Handler+0x258>)
 8000442:	601a      	str	r2, [r3, #0]
      if(degh<0) degh *= -1;
 8000444:	4b65      	ldr	r3, [pc, #404]	; (80005dc <SysTick_Handler+0x258>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	f280 8118 	bge.w	800067e <SysTick_Handler+0x2fa>
 800044e:	4b63      	ldr	r3, [pc, #396]	; (80005dc <SysTick_Handler+0x258>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	425b      	negs	r3, r3
 8000454:	4a61      	ldr	r2, [pc, #388]	; (80005dc <SysTick_Handler+0x258>)
 8000456:	6013      	str	r3, [r2, #0]
 8000458:	e111      	b.n	800067e <SysTick_Handler+0x2fa>
    } 
    //arm2 (LD1) -- up/down
    else {
      arm=22;
 800045a:	4b5b      	ldr	r3, [pc, #364]	; (80005c8 <SysTick_Handler+0x244>)
 800045c:	2216      	movs	r2, #22
 800045e:	601a      	str	r2, [r3, #0]
      hold2 = val;
 8000460:	4b5a      	ldr	r3, [pc, #360]	; (80005cc <SysTick_Handler+0x248>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	4b5c      	ldr	r3, [pc, #368]	; (80005d8 <SysTick_Handler+0x254>)
 8000468:	601a      	str	r2, [r3, #0]
      if(count<val){
 800046a:	4b55      	ldr	r3, [pc, #340]	; (80005c0 <SysTick_Handler+0x23c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	461a      	mov	r2, r3
 8000470:	4b56      	ldr	r3, [pc, #344]	; (80005cc <SysTick_Handler+0x248>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	429a      	cmp	r2, r3
 8000476:	d208      	bcs.n	800048a <SysTick_Handler+0x106>
        *pLEDs |= (1<<1);
 8000478:	4b56      	ldr	r3, [pc, #344]	; (80005d4 <SysTick_Handler+0x250>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a55      	ldr	r2, [pc, #340]	; (80005d4 <SysTick_Handler+0x250>)
 800047e:	6812      	ldr	r2, [r2, #0]
 8000480:	6812      	ldr	r2, [r2, #0]
 8000482:	f042 0202 	orr.w	r2, r2, #2
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	e007      	b.n	800049a <SysTick_Handler+0x116>
      } else {
        *pLEDs &= ~(1<<1);
 800048a:	4b52      	ldr	r3, [pc, #328]	; (80005d4 <SysTick_Handler+0x250>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a51      	ldr	r2, [pc, #324]	; (80005d4 <SysTick_Handler+0x250>)
 8000490:	6812      	ldr	r2, [r2, #0]
 8000492:	6812      	ldr	r2, [r2, #0]
 8000494:	f022 0202 	bic.w	r2, r2, #2
 8000498:	601a      	str	r2, [r3, #0]
      }

      if(count<hold1){
 800049a:	4b49      	ldr	r3, [pc, #292]	; (80005c0 <SysTick_Handler+0x23c>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	4b4c      	ldr	r3, [pc, #304]	; (80005d0 <SysTick_Handler+0x24c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	429a      	cmp	r2, r3
 80004a4:	da08      	bge.n	80004b8 <SysTick_Handler+0x134>
        *pLEDs |= (1<<0);
 80004a6:	4b4b      	ldr	r3, [pc, #300]	; (80005d4 <SysTick_Handler+0x250>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a4a      	ldr	r2, [pc, #296]	; (80005d4 <SysTick_Handler+0x250>)
 80004ac:	6812      	ldr	r2, [r2, #0]
 80004ae:	6812      	ldr	r2, [r2, #0]
 80004b0:	f042 0201 	orr.w	r2, r2, #1
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	e007      	b.n	80004c8 <SysTick_Handler+0x144>
      } else {
        *pLEDs &= ~(1<<0);
 80004b8:	4b46      	ldr	r3, [pc, #280]	; (80005d4 <SysTick_Handler+0x250>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a45      	ldr	r2, [pc, #276]	; (80005d4 <SysTick_Handler+0x250>)
 80004be:	6812      	ldr	r2, [r2, #0]
 80004c0:	6812      	ldr	r2, [r2, #0]
 80004c2:	f022 0201 	bic.w	r2, r2, #1
 80004c6:	601a      	str	r2, [r3, #0]
      }
      degv = val -270;
 80004c8:	4b40      	ldr	r3, [pc, #256]	; (80005cc <SysTick_Handler+0x248>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80004d0:	461a      	mov	r2, r3
 80004d2:	4b43      	ldr	r3, [pc, #268]	; (80005e0 <SysTick_Handler+0x25c>)
 80004d4:	601a      	str	r2, [r3, #0]
      if(degv<0) degv *= -1;
 80004d6:	4b42      	ldr	r3, [pc, #264]	; (80005e0 <SysTick_Handler+0x25c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f280 80cf 	bge.w	800067e <SysTick_Handler+0x2fa>
 80004e0:	4b3f      	ldr	r3, [pc, #252]	; (80005e0 <SysTick_Handler+0x25c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	425b      	negs	r3, r3
 80004e6:	4a3e      	ldr	r2, [pc, #248]	; (80005e0 <SysTick_Handler+0x25c>)
 80004e8:	6013      	str	r3, [r2, #0]
 80004ea:	e0c8      	b.n	800067e <SysTick_Handler+0x2fa>
    }
  } 
  //automatic mode
  else {
    auto_inc = (auto_inc % 180) + 180;
 80004ec:	4b3d      	ldr	r3, [pc, #244]	; (80005e4 <SysTick_Handler+0x260>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a3d      	ldr	r2, [pc, #244]	; (80005e8 <SysTick_Handler+0x264>)
 80004f2:	fb83 0102 	smull	r0, r1, r3, r2
 80004f6:	185a      	adds	r2, r3, r1
 80004f8:	11d1      	asrs	r1, r2, #7
 80004fa:	17da      	asrs	r2, r3, #31
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	21b4      	movs	r1, #180	; 0xb4
 8000500:	fb01 f202 	mul.w	r2, r1, r2
 8000504:	1a9a      	subs	r2, r3, r2
 8000506:	f102 03b4 	add.w	r3, r2, #180	; 0xb4
 800050a:	4a36      	ldr	r2, [pc, #216]	; (80005e4 <SysTick_Handler+0x260>)
 800050c:	6013      	str	r3, [r2, #0]
    count %= 3600;
 800050e:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <SysTick_Handler+0x23c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a2c      	ldr	r2, [pc, #176]	; (80005c4 <SysTick_Handler+0x240>)
 8000514:	fb83 0102 	smull	r0, r1, r3, r2
 8000518:	185a      	adds	r2, r3, r1
 800051a:	12d1      	asrs	r1, r2, #11
 800051c:	17da      	asrs	r2, r3, #31
 800051e:	1a8a      	subs	r2, r1, r2
 8000520:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000524:	fb01 f202 	mul.w	r2, r1, r2
 8000528:	1a9a      	subs	r2, r3, r2
 800052a:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <SysTick_Handler+0x23c>)
 800052c:	601a      	str	r2, [r3, #0]
    cnt %= 50000;
 800052e:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <SysTick_Handler+0x268>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	4b2f      	ldr	r3, [pc, #188]	; (80005f0 <SysTick_Handler+0x26c>)
 8000534:	fb83 1302 	smull	r1, r3, r3, r2
 8000538:	1319      	asrs	r1, r3, #12
 800053a:	17d3      	asrs	r3, r2, #31
 800053c:	1acb      	subs	r3, r1, r3
 800053e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8000542:	fb01 f303 	mul.w	r3, r1, r3
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	4a28      	ldr	r2, [pc, #160]	; (80005ec <SysTick_Handler+0x268>)
 800054a:	6013      	str	r3, [r2, #0]
    //arm1 (LD0) -- left/right
    arm=11;
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <SysTick_Handler+0x244>)
 800054e:	220b      	movs	r2, #11
 8000550:	601a      	str	r2, [r3, #0]
    if(count<auto_inc){
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <SysTick_Handler+0x23c>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <SysTick_Handler+0x260>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	429a      	cmp	r2, r3
 800055c:	da08      	bge.n	8000570 <SysTick_Handler+0x1ec>
      *pLEDs |= (1<<0);
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <SysTick_Handler+0x250>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a1c      	ldr	r2, [pc, #112]	; (80005d4 <SysTick_Handler+0x250>)
 8000564:	6812      	ldr	r2, [r2, #0]
 8000566:	6812      	ldr	r2, [r2, #0]
 8000568:	f042 0201 	orr.w	r2, r2, #1
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	e007      	b.n	8000580 <SysTick_Handler+0x1fc>
    } else {
      *pLEDs &= ~(1<<0);
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <SysTick_Handler+0x250>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <SysTick_Handler+0x250>)
 8000576:	6812      	ldr	r2, [r2, #0]
 8000578:	6812      	ldr	r2, [r2, #0]
 800057a:	f022 0201 	bic.w	r2, r2, #1
 800057e:	601a      	str	r2, [r3, #0]
    }

    degh = auto_inc - 270;
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <SysTick_Handler+0x260>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8000588:	4a14      	ldr	r2, [pc, #80]	; (80005dc <SysTick_Handler+0x258>)
 800058a:	6013      	str	r3, [r2, #0]
    if(degh<0) degh *= -1;
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <SysTick_Handler+0x258>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	da04      	bge.n	800059e <SysTick_Handler+0x21a>
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <SysTick_Handler+0x258>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	425b      	negs	r3, r3
 800059a:	4a10      	ldr	r2, [pc, #64]	; (80005dc <SysTick_Handler+0x258>)
 800059c:	6013      	str	r3, [r2, #0]

    //arm2 (LD1) -- up/down
    if(count<auto_inc){
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <SysTick_Handler+0x23c>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <SysTick_Handler+0x260>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	da24      	bge.n	80005f4 <SysTick_Handler+0x270>
      *pLEDs |= (1<<1);
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <SysTick_Handler+0x250>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <SysTick_Handler+0x250>)
 80005b0:	6812      	ldr	r2, [r2, #0]
 80005b2:	6812      	ldr	r2, [r2, #0]
 80005b4:	f042 0202 	orr.w	r2, r2, #2
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	e023      	b.n	8000604 <SysTick_Handler+0x280>
 80005bc:	20000004 	.word	0x20000004
 80005c0:	200004bc 	.word	0x200004bc
 80005c4:	91a2b3c5 	.word	0x91a2b3c5
 80005c8:	200004e0 	.word	0x200004e0
 80005cc:	200004d0 	.word	0x200004d0
 80005d0:	200004c4 	.word	0x200004c4
 80005d4:	20000000 	.word	0x20000000
 80005d8:	200004c8 	.word	0x200004c8
 80005dc:	200004dc 	.word	0x200004dc
 80005e0:	200004d8 	.word	0x200004d8
 80005e4:	200004cc 	.word	0x200004cc
 80005e8:	b60b60b7 	.word	0xb60b60b7
 80005ec:	200004c0 	.word	0x200004c0
 80005f0:	14f8b589 	.word	0x14f8b589
    } else {
      *pLEDs &= ~(1<<1);
 80005f4:	4b29      	ldr	r3, [pc, #164]	; (800069c <SysTick_Handler+0x318>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a28      	ldr	r2, [pc, #160]	; (800069c <SysTick_Handler+0x318>)
 80005fa:	6812      	ldr	r2, [r2, #0]
 80005fc:	6812      	ldr	r2, [r2, #0]
 80005fe:	f022 0202 	bic.w	r2, r2, #2
 8000602:	601a      	str	r2, [r3, #0]
    }

    degv = auto_inc - 270;
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <SysTick_Handler+0x31c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800060c:	4a25      	ldr	r2, [pc, #148]	; (80006a4 <SysTick_Handler+0x320>)
 800060e:	6013      	str	r3, [r2, #0]
    if(degv<0) degv *= -1;
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <SysTick_Handler+0x320>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	da04      	bge.n	8000622 <SysTick_Handler+0x29e>
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SysTick_Handler+0x320>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	425b      	negs	r3, r3
 800061e:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SysTick_Handler+0x320>)
 8000620:	6013      	str	r3, [r2, #0]

    if(auto_inc == 360) sw=1;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SysTick_Handler+0x31c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800062a:	d103      	bne.n	8000634 <SysTick_Handler+0x2b0>
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <SysTick_Handler+0x324>)
 800062e:	2201      	movs	r2, #1
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	e006      	b.n	8000642 <SysTick_Handler+0x2be>
    else if(auto_inc == 180) sw=0;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <SysTick_Handler+0x31c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2bb4      	cmp	r3, #180	; 0xb4
 800063a:	d102      	bne.n	8000642 <SysTick_Handler+0x2be>
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <SysTick_Handler+0x324>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
  
    if (cnt%50000 == 0) {
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <SysTick_Handler+0x328>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <SysTick_Handler+0x32c>)
 8000648:	fb83 1302 	smull	r1, r3, r3, r2
 800064c:	1319      	asrs	r1, r3, #12
 800064e:	17d3      	asrs	r3, r2, #31
 8000650:	1acb      	subs	r3, r1, r3
 8000652:	f24c 3150 	movw	r1, #50000	; 0xc350
 8000656:	fb01 f303 	mul.w	r3, r1, r3
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d10e      	bne.n	800067e <SysTick_Handler+0x2fa>
      if (sw == 1)
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <SysTick_Handler+0x324>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d105      	bne.n	8000674 <SysTick_Handler+0x2f0>
        auto_inc--;
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <SysTick_Handler+0x31c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <SysTick_Handler+0x31c>)
 8000670:	6013      	str	r3, [r2, #0]
 8000672:	e004      	b.n	800067e <SysTick_Handler+0x2fa>
      else 
        auto_inc++;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <SysTick_Handler+0x31c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <SysTick_Handler+0x31c>)
 800067c:	6013      	str	r3, [r2, #0]
    }
  } 
  count++;
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <SysTick_Handler+0x330>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <SysTick_Handler+0x330>)
 8000686:	6013      	str	r3, [r2, #0]
  cnt++;
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <SysTick_Handler+0x328>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	4a07      	ldr	r2, [pc, #28]	; (80006ac <SysTick_Handler+0x328>)
 8000690:	6013      	str	r3, [r2, #0]
}
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	20000000 	.word	0x20000000
 80006a0:	200004cc 	.word	0x200004cc
 80006a4:	200004d8 	.word	0x200004d8
 80006a8:	200004d4 	.word	0x200004d4
 80006ac:	200004c0 	.word	0x200004c0
 80006b0:	14f8b589 	.word	0x14f8b589
 80006b4:	200004bc 	.word	0x200004bc

080006b8 <SetSysClock>:

  /******************************************************************************/
  /*            PLL (clocked by HSE) used as System clock source                */
  /******************************************************************************/

  push {r4,r5,r6,r7,lr}
 80006b8:	b5f0      	push	{r4, r5, r6, r7, lr}

  ldr r7,=#RCC_BASE
 80006ba:	4f26      	ldr	r7, [pc, #152]	; (8000754 <fail_startup+0x4>)

    /* Enable HSE */
  
    ldr r4,[r7,#RCC_CR]
 80006bc:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#RCC_CR_HSEON
 80006be:	4d26      	ldr	r5, [pc, #152]	; (8000758 <fail_startup+0x8>)
    orr r4,r5
 80006c0:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CR]
 80006c4:	603c      	str	r4, [r7, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */

    ldr r3,=#0x500
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <fail_startup+0xc>)

080006c8 <Wait_HSE_Ready>:
  
    Wait_HSE_Ready:

      subs r3,#1
 80006c8:	3b01      	subs	r3, #1
      beq  fail_startup
 80006ca:	d041      	beq.n	8000750 <fail_startup>
    
      ldr  r4,[r7,#RCC_CR]
 80006cc:	683c      	ldr	r4, [r7, #0]
      ldr  r5,=#RCC_CR_HSERDY
 80006ce:	4d24      	ldr	r5, [pc, #144]	; (8000760 <fail_startup+0x10>)
      ands r4,r5
 80006d0:	402c      	ands	r4, r5
      beq  Wait_HSE_Ready
 80006d2:	d0f9      	beq.n	80006c8 <Wait_HSE_Ready>

      /* Enable high performance mode, System frequency up to 168 MHz */
    
    ldr r4,[r7,#RCC_APB1ENR]
 80006d4:	6c3c      	ldr	r4, [r7, #64]	; 0x40
    ldr r5,=#RCC_APB1ENR_PWREN
 80006d6:	4d23      	ldr	r5, [pc, #140]	; (8000764 <fail_startup+0x14>)
    orr r4,r5
 80006d8:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_APB1ENR]
 80006dc:	643c      	str	r4, [r7, #64]	; 0x40
    

  ldr r7,=#PWR_BASE
 80006de:	4f22      	ldr	r7, [pc, #136]	; (8000768 <fail_startup+0x18>)
    
    ldr r4,[r7,#PWR_CR]
 80006e0:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#PWR_CR_PMODE
 80006e2:	4d22      	ldr	r5, [pc, #136]	; (800076c <fail_startup+0x1c>)
    orr r4,r5
 80006e4:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#PWR_CR]
 80006e8:	603c      	str	r4, [r7, #0]

  ldr r7,=#RCC_BASE
 80006ea:	4f1a      	ldr	r7, [pc, #104]	; (8000754 <fail_startup+0x4>)
    
    /* HCLK = SYSCLK / 1*/

    ldr r4,[r7,#RCC_CFGR]
 80006ec:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_HPRE_DIV1
 80006ee:	4d20      	ldr	r5, [pc, #128]	; (8000770 <fail_startup+0x20>)
    orr r4,r5
 80006f0:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 80006f4:	60bc      	str	r4, [r7, #8]
    
    /* PCLK2 = HCLK / 2*/
    
    ldr r4,[r7,#RCC_CFGR]
 80006f6:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_PPRE2_DIV2
 80006f8:	4d1e      	ldr	r5, [pc, #120]	; (8000774 <fail_startup+0x24>)
    orr r4,r5
 80006fa:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 80006fe:	60bc      	str	r4, [r7, #8]
    
    /* PCLK1 = HCLK / 4*/

    ldr r4,[r7,#RCC_CFGR]
 8000700:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_PPRE1_DIV4
 8000702:	4d1d      	ldr	r5, [pc, #116]	; (8000778 <fail_startup+0x28>)
    orr r4,r5
 8000704:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000708:	60bc      	str	r4, [r7, #8]
    
    /* Configure the main PLL */

    ldr r4,=#( PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) )              
 800070a:	4c1c      	ldr	r4, [pc, #112]	; (800077c <fail_startup+0x2c>)
    str r4,[r7,#RCC_PLLCFGR]
 800070c:	607c      	str	r4, [r7, #4]
    
    /* Enable the main PLL */

    ldr r4,[r7,#RCC_CR]
 800070e:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#RCC_CR_PLLON
 8000710:	4d1b      	ldr	r5, [pc, #108]	; (8000780 <fail_startup+0x30>)
    orr r4,r5
 8000712:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CR]
 8000716:	603c      	str	r4, [r7, #0]

08000718 <Wait_PLL_Ready>:
    
    
    Wait_PLL_Ready:
      ldr r4,[r7,#RCC_CR]
 8000718:	683c      	ldr	r4, [r7, #0]
      ldr r5,=#RCC_CR_PLLRDY
 800071a:	4d1a      	ldr	r5, [pc, #104]	; (8000784 <fail_startup+0x34>)
      ands r4,r5
 800071c:	402c      	ands	r4, r5
      beq Wait_PLL_Ready
 800071e:	d0fb      	beq.n	8000718 <Wait_PLL_Ready>
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */

  ldr r7,=#FLASH_R_BASE   
 8000720:	4f19      	ldr	r7, [pc, #100]	; (8000788 <fail_startup+0x38>)

    ldr r4,=#(FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS)
 8000722:	4c1a      	ldr	r4, [pc, #104]	; (800078c <fail_startup+0x3c>)
    str r4,[r7,#FLASH_ACR]
 8000724:	603c      	str	r4, [r7, #0]

  ldr r7,=#RCC_BASE
 8000726:	4f0b      	ldr	r7, [pc, #44]	; (8000754 <fail_startup+0x4>)
  
    /* Select the main PLL as system clock source */
    
    ldr r4,[r7,#RCC_CFGR]
 8000728:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#~(RCC_CFGR_SW)
 800072a:	4d19      	ldr	r5, [pc, #100]	; (8000790 <fail_startup+0x40>)
    and r4,r5
 800072c:	ea04 0405 	and.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000730:	60bc      	str	r4, [r7, #8]

    ldr r4,[r7,#RCC_CFGR]
 8000732:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_SW_PLL
 8000734:	4d17      	ldr	r5, [pc, #92]	; (8000794 <fail_startup+0x44>)
    orr r4,r5
 8000736:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 800073a:	60bc      	str	r4, [r7, #8]

0800073c <Wait_PLL>:
    
    Wait_PLL:
      ldr r4,[r7,#RCC_CFGR]
 800073c:	68bc      	ldr	r4, [r7, #8]
      ldr r5,=#RCC_CFGR_SWS
 800073e:	4d16      	ldr	r5, [pc, #88]	; (8000798 <fail_startup+0x48>)
      and r4,r5
 8000740:	ea04 0405 	and.w	r4, r4, r5
      ldr r5,=#RCC_CFGR_SWS_PLL
 8000744:	4d15      	ldr	r5, [pc, #84]	; (800079c <fail_startup+0x4c>)
      cmp r4,r5
 8000746:	42ac      	cmp	r4, r5
      bne Wait_PLL
 8000748:	d1f8      	bne.n	800073c <Wait_PLL>
   
    pop {r4,r5,r6,r7,lr}
 800074a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    
    bx lr
 800074e:	4770      	bx	lr

08000750 <fail_startup>:
  
  fail_startup:
    
    b fail_startup
 8000750:	e7fe      	b.n	8000750 <fail_startup>
 8000752:	0000      	.short	0x0000
  /*            PLL (clocked by HSE) used as System clock source                */
  /******************************************************************************/

  push {r4,r5,r6,r7,lr}

  ldr r7,=#RCC_BASE
 8000754:	40023800 	.word	0x40023800

    /* Enable HSE */
  
    ldr r4,[r7,#RCC_CR]
    ldr r5,=#RCC_CR_HSEON
 8000758:	00010000 	.word	0x00010000
    orr r4,r5
    str r4,[r7,#RCC_CR]
 
  /* Wait till HSE is ready and if Time out is reached exit */

    ldr r3,=#0x500
 800075c:	00000500 	.word	0x00000500

      subs r3,#1
      beq  fail_startup
    
      ldr  r4,[r7,#RCC_CR]
      ldr  r5,=#RCC_CR_HSERDY
 8000760:	00020000 	.word	0x00020000
      beq  Wait_HSE_Ready

      /* Enable high performance mode, System frequency up to 168 MHz */
    
    ldr r4,[r7,#RCC_APB1ENR]
    ldr r5,=#RCC_APB1ENR_PWREN
 8000764:	10000000 	.word	0x10000000
    orr r4,r5
    str r4,[r7,#RCC_APB1ENR]
    

  ldr r7,=#PWR_BASE
 8000768:	40007000 	.word	0x40007000
    
    ldr r4,[r7,#PWR_CR]
    ldr r5,=#PWR_CR_PMODE
 800076c:	00004000 	.word	0x00004000
  ldr r7,=#RCC_BASE
    
    /* HCLK = SYSCLK / 1*/

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_HPRE_DIV1
 8000770:	00000000 	.word	0x00000000
    str r4,[r7,#RCC_CFGR]
    
    /* PCLK2 = HCLK / 2*/
    
    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_PPRE2_DIV2
 8000774:	00008000 	.word	0x00008000
    str r4,[r7,#RCC_CFGR]
    
    /* PCLK1 = HCLK / 4*/

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_PPRE1_DIV4
 8000778:	00001400 	.word	0x00001400
    orr r4,r5
    str r4,[r7,#RCC_CFGR]
    
    /* Configure the main PLL */

    ldr r4,=#( PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) )              
 800077c:	07405408 	.word	0x07405408
    str r4,[r7,#RCC_PLLCFGR]
    
    /* Enable the main PLL */

    ldr r4,[r7,#RCC_CR]
    ldr r5,=#RCC_CR_PLLON
 8000780:	01000000 	.word	0x01000000
    str r4,[r7,#RCC_CR]
    
    
    Wait_PLL_Ready:
      ldr r4,[r7,#RCC_CR]
      ldr r5,=#RCC_CR_PLLRDY
 8000784:	02000000 	.word	0x02000000
      ands r4,r5
      beq Wait_PLL_Ready
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */

  ldr r7,=#FLASH_R_BASE   
 8000788:	40023c00 	.word	0x40023c00

    ldr r4,=#(FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS)
 800078c:	00000605 	.word	0x00000605
  ldr r7,=#RCC_BASE
  
    /* Select the main PLL as system clock source */
    
    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#~(RCC_CFGR_SW)
 8000790:	fffffffc 	.word	0xfffffffc
    and r4,r5
    str r4,[r7,#RCC_CFGR]

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_SW_PLL
 8000794:	00000002 	.word	0x00000002
    orr r4,r5
    str r4,[r7,#RCC_CFGR]
    
    Wait_PLL:
      ldr r4,[r7,#RCC_CFGR]
      ldr r5,=#RCC_CFGR_SWS
 8000798:	0000000c 	.word	0x0000000c
      and r4,r5
      ldr r5,=#RCC_CFGR_SWS_PLL
 800079c:	00000008 	.word	0x00000008

080007a0 <adc_init>:
struct RCC  * RCC  = (struct RCC*)RCC_BASE;
struct GPIO *GPIOA = (struct GPIO*)GPIOA_BASE;
struct ADC  *ADC1  = (struct ADC*)ADC1_BASE;

void adc_init(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  // enable GPIOA0
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <adc_init+0x80>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a1d      	ldr	r2, [pc, #116]	; (8000820 <adc_init+0x80>)
 80007aa:	6812      	ldr	r2, [r2, #0]
 80007ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80007ae:	f042 0201 	orr.w	r2, r2, #1
 80007b2:	631a      	str	r2, [r3, #48]	; 0x30
  GPIOA->MODER |= ((uint32_t)(GPIO_MODE_ANALOG << ( 2 * 0))); // 0x3 is analog mode
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <adc_init+0x84>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a1a      	ldr	r2, [pc, #104]	; (8000824 <adc_init+0x84>)
 80007ba:	6812      	ldr	r2, [r2, #0]
 80007bc:	6812      	ldr	r2, [r2, #0]
 80007be:	f042 0203 	orr.w	r2, r2, #3
 80007c2:	601a      	str	r2, [r3, #0]
  
 // enable APB2 for ADC1
  RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <adc_init+0x80>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a15      	ldr	r2, [pc, #84]	; (8000820 <adc_init+0x80>)
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80007ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007d2:	645a      	str	r2, [r3, #68]	; 0x44

  ADC1->CR1 = 0; // defaults are fine for now
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <adc_init+0x88>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  ADC1->CR2 = 0; // defaults are fine for now
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <adc_init+0x88>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  
  // Configure Channel/Sequence
  // SQR1[23:20] set sequence length -- 0 means one conversion 
  ADC1->SQR1 = 0;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <adc_init+0x88>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2200      	movs	r2, #0
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  // NOTE: set ~10us to read 
  // ADCCLK is F_pclk2 (84MHz) / prescaler
  // default prescaler = 2, so default ADCCLK is 42MHz
  // 42MHz -> 23.9ns cycle, so we need 480 cycle sampling time
  // Set Sample Time (480 Cycles)
  ADC1->SMPR1 = 7<<18;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <adc_init+0x88>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80007f4:	60da      	str	r2, [r3, #12]

  // set the channel
  ADC1->SQR2 = 0;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <adc_init+0x88>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2200      	movs	r2, #0
 80007fc:	631a      	str	r2, [r3, #48]	; 0x30
  ADC1->SQR3 = 0; // choose ADC IN0
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <adc_init+0x88>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2200      	movs	r2, #0
 8000804:	635a      	str	r2, [r3, #52]	; 0x34

  // Enable ADC
  ADC1->CR2 |= ADC_CR2_ADON;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <adc_init+0x88>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a07      	ldr	r2, [pc, #28]	; (8000828 <adc_init+0x88>)
 800080c:	6812      	ldr	r2, [r2, #0]
 800080e:	6892      	ldr	r2, [r2, #8]
 8000810:	f042 0201 	orr.w	r2, r2, #1
 8000814:	609a      	str	r2, [r3, #8]
}
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000068 	.word	0x20000068
 8000824:	2000006c 	.word	0x2000006c
 8000828:	20000070 	.word	0x20000070

0800082c <adc_start>:

void adc_start(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  // Start Regular Channel Conversion
  ADC1->CR2 |= ADC_CR2_SWSTART;
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <adc_start+0x1c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <adc_start+0x1c>)
 8000836:	6812      	ldr	r2, [r2, #0]
 8000838:	6892      	ldr	r2, [r2, #8]
 800083a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800083e:	609a      	str	r2, [r3, #8]
}
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	20000070 	.word	0x20000070

0800084c <adc_done>:

bool adc_done(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  // This bit is SET by hardware once the conversion is complete
  // it is CLEARED by software OR by reading the ADC_DR register
  return (ADC1->SR & ADC_SR_EOC);
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <adc_done+0x24>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	2b00      	cmp	r3, #0
 800085c:	bf14      	ite	ne
 800085e:	2301      	movne	r3, #1
 8000860:	2300      	moveq	r3, #0
 8000862:	b2db      	uxtb	r3, r3
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000070 	.word	0x20000070

08000874 <adc_get>:

uint32_t adc_get(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  // this clears the ADC_SR_EOC bit
  return ADC1->DR;
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <adc_get+0x14>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	20000070 	.word	0x20000070

0800088c <SysTick_Config>:
    unsigned int SYST_CALIB;
};


unsigned int SysTick_Config(unsigned int ticks)
{
 800088c:	b480      	push	{r7}
 800088e:	b087      	sub	sp, #28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    /* set reload register */
    if (ticks > ((1<<24)-1)) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800089a:	d302      	bcc.n	80008a2 <SysTick_Config+0x16>
        ticks = 1<<24;
 800089c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008a0:	607b      	str	r3, [r7, #4]
    }
    ticks /=65;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <SysTick_Config+0x64>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	099b      	lsrs	r3, r3, #6
 80008ac:	607b      	str	r3, [r7, #4]
    SysTick->SYST_RVR = ticks;       /* set reload register - don't allow bigger than 2^24-1! */
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <SysTick_Config+0x68>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	605a      	str	r2, [r3, #4]

    SysTick->SYST_CVR = 0;       /* Load the SysTick Counter Value */
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <SysTick_Config+0x68>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  
    //CLKSOURCE: SYST_CSR + 2   //Clock Source is Processor Clock
    unsigned int *clksrc = (unsigned int*)SysTick_BASE + 2;     /* Create pointer to Port D - ODR Reg */
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <SysTick_Config+0x6c>)
 80008c0:	617b      	str	r3, [r7, #20]
    //TICKINT: SYST_CST + 1     //Enable SysTick IRQ
    unsigned int *tickint = (unsigned int*)SysTick_BASE + 1; 
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <SysTick_Config+0x70>)
 80008c4:	613b      	str	r3, [r7, #16]
    //ENABLE: SYST_CST + 0      //Enable SysTick Timer Count
    unsigned int *enable = (unsigned int*)SysTick_BASE;  
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <SysTick_Config+0x74>)
 80008c8:	60fb      	str	r3, [r7, #12]
    SysTick->SYST_CSR = (*clksrc | *tickint | *enable);
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <SysTick_Config+0x68>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	6811      	ldr	r1, [r2, #0]
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	6812      	ldr	r2, [r2, #0]
 80008d6:	4311      	orrs	r1, r2
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	6812      	ldr	r2, [r2, #0]
 80008dc:	430a      	orrs	r2, r1
 80008de:	601a      	str	r2, [r3, #0]
   
    return (0);                           /* Function successful but we won't check */                          
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	371c      	adds	r7, #28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	fc0fc0fd 	.word	0xfc0fc0fd
 80008f4:	20000074 	.word	0x20000074
 80008f8:	e000e018 	.word	0xe000e018
 80008fc:	e000e014 	.word	0xe000e014
 8000900:	e000e010 	.word	0xe000e010

08000904 <gpio_d_init>:

  .text

  FUNCTION gpio_d_init,global

    push {lr}
 8000904:	b500      	push	{lr}

		mov r0,#3						//send 3 as arg to rcc function
 8000906:	f04f 0003 	mov.w	r0, #3
		bl rcc_gpio_enable				//call rcc function
 800090a:	f000 f843 	bl	8000994 <rcc_gpio_enable>

		ldr r3, =#GPIOD_BASE			//load r3 with the base address of PORT D
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <gpio_d_init+0x24>)

		ldr r2, =#0x00000000			//load 0 into r2
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <gpio_d_init+0x28>)
		str r2,[r3,#GPIO_PUPDR]			//write Port D PUPDR register as no pull-up, no pull-down
 8000912:	60da      	str	r2, [r3, #12]
		str r2,[r3,#GPIO_OTYPER]		//write Port D OTYPER register as reset state
 8000914:	605a      	str	r2, [r3, #4]
		str r2,[r3,#GPIO_ODR]			//write 0 to GPIO Port D output data register
 8000916:	615a      	str	r2, [r3, #20]

		ldr r2,=#0x55555555				//set all 16 bits of Port D to outputs
 8000918:	4a05      	ldr	r2, [pc, #20]	; (8000930 <gpio_d_init+0x2c>)
		str r2,[r3,#GPIO_MODER]
 800091a:	601a      	str	r2, [r3, #0]

		ldr r2,=#0xffffffff				//load all ones into r2
 800091c:	4a05      	ldr	r2, [pc, #20]	; (8000934 <gpio_d_init+0x30>)
		str r2,[r3,#GPIO_OSPEEDR]		//set Port D SPEEDR register as high speed
 800091e:	609a      	str	r2, [r3, #8]

		pop {lr}
 8000920:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 8000924:	4770      	bx	lr
 8000926:	0000      	.short	0x0000
    push {lr}

		mov r0,#3						//send 3 as arg to rcc function
		bl rcc_gpio_enable				//call rcc function

		ldr r3, =#GPIOD_BASE			//load r3 with the base address of PORT D
 8000928:	40020c00 	.word	0x40020c00

		ldr r2, =#0x00000000			//load 0 into r2
 800092c:	00000000 	.word	0x00000000
		str r2,[r3,#GPIO_PUPDR]			//write Port D PUPDR register as no pull-up, no pull-down
		str r2,[r3,#GPIO_OTYPER]		//write Port D OTYPER register as reset state
		str r2,[r3,#GPIO_ODR]			//write 0 to GPIO Port D output data register

		ldr r2,=#0x55555555				//set all 16 bits of Port D to outputs
 8000930:	55555555 	.word	0x55555555
		str r2,[r3,#GPIO_MODER]

		ldr r2,=#0xffffffff				//load all ones into r2
 8000934:	ffffffff 	.word	0xffffffff

08000938 <gpio_d_put>:
  
  ENDFUNC gpio_d_init

  FUNCTION gpio_d_put,global

		push {lr}
 8000938:	b500      	push	{lr}

		ldr r3, =#GPIOD_BASE		//load r3 with the base address of Port D
 800093a:	4b02      	ldr	r3, [pc, #8]	; (8000944 <gpio_d_put+0xc>)

		str r0,[r3,#GPIO_ODR]		//write r0 to GPIO Port D output
 800093c:	6158      	str	r0, [r3, #20]

		pop {lr}
 800093e:	f85d eb04 	ldr.w	lr, [sp], #4

		bx lr
 8000942:	4770      	bx	lr

  FUNCTION gpio_d_put,global

		push {lr}

		ldr r3, =#GPIOD_BASE		//load r3 with the base address of Port D
 8000944:	40020c00 	.word	0x40020c00

08000948 <gpio_d_get_current>:

  ENDFUNC gpio_d_put

  FUNCTION gpio_d_get_current,global

        push {lr}
 8000948:	b500      	push	{lr}

        ldr r3,=#GPIOD_BASE         //load r3 with base register address of port D
 800094a:	4b02      	ldr	r3, [pc, #8]	; (8000954 <gpio_d_get_current+0xc>)
        ldr r0,[r3,#GPIO_ODR]       //load r0 (return arg) with GPIO D output data register
 800094c:	6958      	ldr	r0, [r3, #20]

        pop {lr}
 800094e:	f85d eb04 	ldr.w	lr, [sp], #4

        bx lr
 8000952:	4770      	bx	lr

  FUNCTION gpio_d_get_current,global

        push {lr}

        ldr r3,=#GPIOD_BASE         //load r3 with base register address of port D
 8000954:	40020c00 	.word	0x40020c00

08000958 <gpio_c_init>:

  .text

  FUNCTION gpio_c_init,global

    push {lr}
 8000958:	b500      	push	{lr}

		mov r0,#2						//send 2 as arg to rcc function
 800095a:	f04f 0002 	mov.w	r0, #2
		bl rcc_gpio_enable				//call rcc function
 800095e:	f000 f819 	bl	8000994 <rcc_gpio_enable>

		ldr r3, =#GPIOC_BASE			//load r3 with the base address of PORT C
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <gpio_c_init+0x20>)

		ldr r2, =#0x00000000			//load 0 into r2
 8000964:	4a05      	ldr	r2, [pc, #20]	; (800097c <gpio_c_init+0x24>)
		str r2,[r3,#GPIO_PUPDR]			//write Port C PUPDR register as no pull-up, no pull-down
 8000966:	60da      	str	r2, [r3, #12]
		str r2,[r3,#GPIO_MODER]			//write Port C MODER register as input
 8000968:	601a      	str	r2, [r3, #0]
		str r2,[r3,#GPIO_OTYPER]		//write Port C OTYPER register as reset state
 800096a:	605a      	str	r2, [r3, #4]

		ldr r2,=#0xffffffff				//load all ones into r2
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <gpio_c_init+0x28>)
		str r2,[r3,#GPIO_OSPEEDR]		//set Port C SPEEDR register as high speed
 800096e:	609a      	str	r2, [r3, #8]

		pop {lr}
 8000970:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 8000974:	4770      	bx	lr
 8000976:	0000      	.short	0x0000
    push {lr}

		mov r0,#2						//send 2 as arg to rcc function
		bl rcc_gpio_enable				//call rcc function

		ldr r3, =#GPIOC_BASE			//load r3 with the base address of PORT C
 8000978:	40020800 	.word	0x40020800

		ldr r2, =#0x00000000			//load 0 into r2
 800097c:	00000000 	.word	0x00000000
		str r2,[r3,#GPIO_PUPDR]			//write Port C PUPDR register as no pull-up, no pull-down
		str r2,[r3,#GPIO_MODER]			//write Port C MODER register as input
		str r2,[r3,#GPIO_OTYPER]		//write Port C OTYPER register as reset state

		ldr r2,=#0xffffffff				//load all ones into r2
 8000980:	ffffffff 	.word	0xffffffff

08000984 <gpio_c_get>:
  
  ENDFUNC gpio_c_init

  FUNCTION gpio_c_get,global

		push {lr}
 8000984:	b500      	push	{lr}

		ldr r3,=#GPIOC_BASE			//load r3 with the base address of Port C
 8000986:	4b02      	ldr	r3, [pc, #8]	; (8000990 <gpio_c_get+0xc>)

		ldr r0,[r3,#GPIO_IDR]		//load r0 with the GPIO Port C input data register
 8000988:	6918      	ldr	r0, [r3, #16]

		pop {lr}
 800098a:	f85d eb04 	ldr.w	lr, [sp], #4

		bx lr
 800098e:	4770      	bx	lr

  FUNCTION gpio_c_get,global

		push {lr}

		ldr r3,=#GPIOC_BASE			//load r3 with the base address of Port C
 8000990:	40020800 	.word	0x40020800

08000994 <rcc_gpio_enable>:
   .thumb_func
   .type       rcc_gpio_enable, %function

rcc_gpio_enable:

  mov r3,#4
 8000994:	f04f 0304 	mov.w	r3, #4
  cmp r0,r3
 8000998:	4298      	cmp	r0, r3
  bgt skip_enable
 800099a:	dc08      	bgt.n	80009ae <skip_enable>
    
    ldr r3,=RCC_BASE
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <skip_enable+0x2>)
    ldr r1,[r3, #RCC_AHB1ENR]
 800099e:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#1
 80009a0:	f04f 0201 	mov.w	r2, #1
    lsl r2,r0
 80009a4:	fa02 f200 	lsl.w	r2, r2, r0
    orr r1,r2
 80009a8:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, RCC_AHB1ENR]
 80009ac:	6319      	str	r1, [r3, #48]	; 0x30

080009ae <skip_enable>:

  skip_enable:

  bx lr
 80009ae:	4770      	bx	lr

  mov r3,#4
  cmp r0,r3
  bgt skip_enable
    
    ldr r3,=RCC_BASE
 80009b0:	40023800 	.word	0x40023800

080009b4 <ADC_IRQHandler>:
*/

FUNCTION Default_Handler

  Infinite_Loop:
    b  Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC_IRQHandler>
 80009b6:	bf00      	nop

080009b8 <Reset_Handler>:
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 80009b8:	4915      	ldr	r1, [pc, #84]	; (8000a10 <bloop+0x3e>)
    ldr	r2, =__data_start__	// to start
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <bloop+0x42>)
    ldr	r3, =__data_end__	// to end
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <bloop+0x46>)

080009be <loop_data>:

    loop_data:
      cmp	r2, r3
 80009be:	429a      	cmp	r2, r3
      ittt	lt
 80009c0:	bfbe      	ittt	lt
      ldrlt	r0, [r1], #4
 80009c2:	f851 0b04 	ldrlt.w	r0, [r1], #4
      strlt	r0, [r2], #4
 80009c6:	f842 0b04 	strlt.w	r0, [r2], #4
      blt	loop_data
 80009ca:	e7f8      	blt.n	80009be <loop_data>
      
    movs    r0, #0
 80009cc:	2000      	movs	r0, #0
    ldr     r1, =__bss_start__
 80009ce:	4913      	ldr	r1, [pc, #76]	; (8000a1c <bloop+0x4a>)
    ldr     r2, =__bss_end__
 80009d0:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <bloop+0x4e>)

080009d2 <bloop>:

    bloop:
      cmp     r1, r2
 80009d2:	4291      	cmp	r1, r2
      itt     lo
 80009d4:	bf3c      	itt	cc
      strlo   r0, [r1], #4
 80009d6:	f841 0b04 	strcc.w	r0, [r1], #4
      blo     bloop
 80009da:	e7fa      	bcc.n	80009d2 <bloop>
    
    bl __libc_init_array
 80009dc:	f000 f88a 	bl	8000af4 <__libc_init_array>

    ldr	r0, .Lfini
 80009e0:	480a      	ldr	r0, [pc, #40]	; (8000a0c <bloop+0x3a>)
    bl	atexit
 80009e2:	f000 f871 	bl	8000ac8 <atexit>

    .weak SystemInit
    ldr	r0,=SystemInit
 80009e6:	480f      	ldr	r0, [pc, #60]	; (8000a24 <bloop+0x52>)
    cmp	r0,#0
 80009e8:	2800      	cmp	r0, #0
    it	ne
 80009ea:	bf18      	it	ne
    blxne	r0
 80009ec:	4780      	blxne	r0
    
    ldr	  r3,=0xe000ed14
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <bloop+0x56>)
    ldr   r2,=((1<<4) | (1<<3))
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <bloop+0x5a>)
    str   r2,[r3]
 80009f2:	601a      	str	r2, [r3, #0]
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <bloop+0x5e>)
    ldr r1,[r3, #RCC_AHB1ENR]
 80009f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#0b11111			/* enable all clocks */
 80009f8:	f04f 021f 	mov.w	r2, #31
    orr r1,r2
 80009fc:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, #RCC_AHB1ENR]
 8000a00:	6319      	str	r1, [r3, #48]	; 0x30
    
    bl  main
 8000a02:	f7ff fbef 	bl	80001e4 <main>
	
    bl  exit
 8000a06:	f000 f865 	bl	8000ad4 <exit>
	
    bx  lr
 8000a0a:	4770      	bx	lr
 8000a0c:	08000d15 	.word	0x08000d15
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 8000a10:	08000d2c 	.word	0x08000d2c
    ldr	r2, =__data_start__	// to start
 8000a14:	20000000 	.word	0x20000000
    ldr	r3, =__data_end__	// to end
 8000a18:	200004a0 	.word	0x200004a0
      ldrlt	r0, [r1], #4
      strlt	r0, [r2], #4
      blt	loop_data
      
    movs    r0, #0
    ldr     r1, =__bss_start__
 8000a1c:	200004a0 	.word	0x200004a0
    ldr     r2, =__bss_end__
 8000a20:	200004e4 	.word	0x200004e4

    ldr	r0, .Lfini
    bl	atexit

    .weak SystemInit
    ldr	r0,=SystemInit
 8000a24:	00000000 	.word	0x00000000
    cmp	r0,#0
    it	ne
    blxne	r0
    
    ldr	  r3,=0xe000ed14
 8000a28:	e000ed14 	.word	0xe000ed14
    ldr   r2,=((1<<4) | (1<<3))
 8000a2c:	00000018 	.word	0x00000018
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 8000a30:	40023800 	.word	0x40023800

08000a34 <seg7_init>:
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <seg7_init_loop_end+0x6>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4911      	ldr	r1, [pc, #68]	; (8000a80 <seg7_init_loop_end+0xa>)
 8000a3c:	f361 0213 	bfi	r2, r1, #0, #20
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	695a      	ldr	r2, [r3, #20]
 8000a44:	490f      	ldr	r1, [pc, #60]	; (8000a84 <seg7_init_loop_end+0xe>)
 8000a46:	f361 0209 	bfi	r2, r1, #0, #10
 8000a4a:	615a      	str	r2, [r3, #20]
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <seg7_init_loop_end+0x12>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	490e      	ldr	r1, [pc, #56]	; (8000a8c <seg7_init_loop_end+0x16>)
 8000a52:	f361 0201 	bfi	r2, r1, #0, #2
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	f04f 0400 	mov.w	r4, #0
 8000a5c:	f04f 0508 	mov.w	r5, #8
 8000a60:	4e0b      	ldr	r6, [pc, #44]	; (8000a90 <seg7_init_loop_end+0x1a>)

08000a62 <seg7_init_loop>:
 8000a62:	b145      	cbz	r5, 8000a76 <seg7_init_loop_end>
 8000a64:	4620      	mov	r0, r4
 8000a66:	4631      	mov	r1, r6
 8000a68:	f000 f814 	bl	8000a94 <seg7_put>
 8000a6c:	f104 0401 	add.w	r4, r4, #1
 8000a70:	f1a5 0501 	sub.w	r5, r5, #1
 8000a74:	e7f5      	b.n	8000a62 <seg7_init_loop>

08000a76 <seg7_init_loop_end>:
 8000a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000a7a:	4770      	bx	lr
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	00055555 	.word	0x00055555
 8000a84:	000003ff 	.word	0x000003ff
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	00000001 	.word	0x00000001
 8000a90:	0000007f 	.word	0x0000007f

08000a94 <seg7_put>:
 8000a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a96:	4f0a      	ldr	r7, [pc, #40]	; (8000ac0 <seg7_put+0x2c>)
 8000a98:	697c      	ldr	r4, [r7, #20]
 8000a9a:	f360 0402 	bfi	r4, r0, #0, #3
 8000a9e:	f361 04c9 	bfi	r4, r1, #3, #7
 8000aa2:	617c      	str	r4, [r7, #20]
 8000aa4:	4f07      	ldr	r7, [pc, #28]	; (8000ac4 <seg7_put+0x30>)
 8000aa6:	f04f 0401 	mov.w	r4, #1
 8000aaa:	61bc      	str	r4, [r7, #24]
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	ea4f 4404 	mov.w	r4, r4, lsl #16
 8000ab8:	61bc      	str	r4, [r7, #24]
 8000aba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000abe:	4770      	bx	lr
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <atexit>:
 8000ac8:	4601      	mov	r1, r0
 8000aca:	2000      	movs	r0, #0
 8000acc:	4602      	mov	r2, r0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	f000 b838 	b.w	8000b44 <__register_exitproc>

08000ad4 <exit>:
 8000ad4:	b508      	push	{r3, lr}
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4604      	mov	r4, r0
 8000ada:	f000 f88f 	bl	8000bfc <__call_exitprocs>
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <exit+0x1c>)
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000ae4:	b103      	cbz	r3, 8000ae8 <exit+0x14>
 8000ae6:	4798      	blx	r3
 8000ae8:	4620      	mov	r0, r4
 8000aea:	f000 f907 	bl	8000cfc <_exit>
 8000aee:	bf00      	nop
 8000af0:	08000d04 	.word	0x08000d04

08000af4 <__libc_init_array>:
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	4e0f      	ldr	r6, [pc, #60]	; (8000b34 <__libc_init_array+0x40>)
 8000af8:	4d0f      	ldr	r5, [pc, #60]	; (8000b38 <__libc_init_array+0x44>)
 8000afa:	1b76      	subs	r6, r6, r5
 8000afc:	10b6      	asrs	r6, r6, #2
 8000afe:	bf18      	it	ne
 8000b00:	2400      	movne	r4, #0
 8000b02:	d005      	beq.n	8000b10 <__libc_init_array+0x1c>
 8000b04:	3401      	adds	r4, #1
 8000b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b0a:	4798      	blx	r3
 8000b0c:	42a6      	cmp	r6, r4
 8000b0e:	d1f9      	bne.n	8000b04 <__libc_init_array+0x10>
 8000b10:	4e0a      	ldr	r6, [pc, #40]	; (8000b3c <__libc_init_array+0x48>)
 8000b12:	4d0b      	ldr	r5, [pc, #44]	; (8000b40 <__libc_init_array+0x4c>)
 8000b14:	1b76      	subs	r6, r6, r5
 8000b16:	f000 f8f7 	bl	8000d08 <_init>
 8000b1a:	10b6      	asrs	r6, r6, #2
 8000b1c:	bf18      	it	ne
 8000b1e:	2400      	movne	r4, #0
 8000b20:	d006      	beq.n	8000b30 <__libc_init_array+0x3c>
 8000b22:	3401      	adds	r4, #1
 8000b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b28:	4798      	blx	r3
 8000b2a:	42a6      	cmp	r6, r4
 8000b2c:	d1f9      	bne.n	8000b22 <__libc_init_array+0x2e>
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}
 8000b30:	bd70      	pop	{r4, r5, r6, pc}
 8000b32:	bf00      	nop
 8000b34:	08000d20 	.word	0x08000d20
 8000b38:	08000d20 	.word	0x08000d20
 8000b3c:	08000d28 	.word	0x08000d28
 8000b40:	08000d20 	.word	0x08000d20

08000b44 <__register_exitproc>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	4c25      	ldr	r4, [pc, #148]	; (8000be0 <__register_exitproc+0x9c>)
 8000b4a:	6825      	ldr	r5, [r4, #0]
 8000b4c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8000b50:	4606      	mov	r6, r0
 8000b52:	4688      	mov	r8, r1
 8000b54:	4692      	mov	sl, r2
 8000b56:	4699      	mov	r9, r3
 8000b58:	b3cc      	cbz	r4, 8000bce <__register_exitproc+0x8a>
 8000b5a:	6860      	ldr	r0, [r4, #4]
 8000b5c:	281f      	cmp	r0, #31
 8000b5e:	dc18      	bgt.n	8000b92 <__register_exitproc+0x4e>
 8000b60:	1c43      	adds	r3, r0, #1
 8000b62:	b17e      	cbz	r6, 8000b84 <__register_exitproc+0x40>
 8000b64:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8000b68:	2101      	movs	r1, #1
 8000b6a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8000b6e:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 8000b72:	fa01 f200 	lsl.w	r2, r1, r0
 8000b76:	4317      	orrs	r7, r2
 8000b78:	2e02      	cmp	r6, #2
 8000b7a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000b7e:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8000b82:	d01e      	beq.n	8000bc2 <__register_exitproc+0x7e>
 8000b84:	3002      	adds	r0, #2
 8000b86:	6063      	str	r3, [r4, #4]
 8000b88:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <__register_exitproc+0xa0>)
 8000b94:	b303      	cbz	r3, 8000bd8 <__register_exitproc+0x94>
 8000b96:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b9a:	f3af 8000 	nop.w
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	b1d0      	cbz	r0, 8000bd8 <__register_exitproc+0x94>
 8000ba2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000ba6:	2700      	movs	r7, #0
 8000ba8:	e880 0088 	stmia.w	r0, {r3, r7}
 8000bac:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000bb0:	4638      	mov	r0, r7
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000bb8:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8000bbc:	2e00      	cmp	r6, #0
 8000bbe:	d0e1      	beq.n	8000b84 <__register_exitproc+0x40>
 8000bc0:	e7d0      	b.n	8000b64 <__register_exitproc+0x20>
 8000bc2:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8000bcc:	e7da      	b.n	8000b84 <__register_exitproc+0x40>
 8000bce:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000bd2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000bd6:	e7c0      	b.n	8000b5a <__register_exitproc+0x16>
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be0:	08000d04 	.word	0x08000d04
 8000be4:	00000000 	.word	0x00000000

08000be8 <register_fini>:
 8000be8:	4b02      	ldr	r3, [pc, #8]	; (8000bf4 <register_fini+0xc>)
 8000bea:	b113      	cbz	r3, 8000bf2 <register_fini+0xa>
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <register_fini+0x10>)
 8000bee:	f7ff bf6b 	b.w	8000ac8 <atexit>
 8000bf2:	4770      	bx	lr
 8000bf4:	00000000 	.word	0x00000000
 8000bf8:	08000cd1 	.word	0x08000cd1

08000bfc <__call_exitprocs>:
 8000bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c00:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <__call_exitprocs+0xcc>)
 8000c02:	b083      	sub	sp, #12
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8000c0c:	4681      	mov	r9, r0
 8000c0e:	460e      	mov	r6, r1
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	9b00      	ldr	r3, [sp, #0]
 8000c14:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
 8000c18:	b327      	cbz	r7, 8000c64 <__call_exitprocs+0x68>
 8000c1a:	f8dd a004 	ldr.w	sl, [sp, #4]
 8000c1e:	687c      	ldr	r4, [r7, #4]
 8000c20:	1e65      	subs	r5, r4, #1
 8000c22:	d40e      	bmi.n	8000c42 <__call_exitprocs+0x46>
 8000c24:	3401      	adds	r4, #1
 8000c26:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8000c2a:	f04f 0800 	mov.w	r8, #0
 8000c2e:	b1e6      	cbz	r6, 8000c6a <__call_exitprocs+0x6e>
 8000c30:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8000c34:	42b3      	cmp	r3, r6
 8000c36:	d018      	beq.n	8000c6a <__call_exitprocs+0x6e>
 8000c38:	3d01      	subs	r5, #1
 8000c3a:	1c6b      	adds	r3, r5, #1
 8000c3c:	f1a4 0404 	sub.w	r4, r4, #4
 8000c40:	d1f5      	bne.n	8000c2e <__call_exitprocs+0x32>
 8000c42:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <__call_exitprocs+0xd0>)
 8000c44:	b173      	cbz	r3, 8000c64 <__call_exitprocs+0x68>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d136      	bne.n	8000cba <__call_exitprocs+0xbe>
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d034      	beq.n	8000cbc <__call_exitprocs+0xc0>
 8000c52:	4638      	mov	r0, r7
 8000c54:	f8ca 3000 	str.w	r3, [sl]
 8000c58:	f3af 8000 	nop.w
 8000c5c:	f8da 7000 	ldr.w	r7, [sl]
 8000c60:	2f00      	cmp	r7, #0
 8000c62:	d1dc      	bne.n	8000c1e <__call_exitprocs+0x22>
 8000c64:	b003      	add	sp, #12
 8000c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6822      	ldr	r2, [r4, #0]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	bf0c      	ite	eq
 8000c74:	607d      	streq	r5, [r7, #4]
 8000c76:	f8c4 8000 	strne.w	r8, [r4]
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	d0dc      	beq.n	8000c38 <__call_exitprocs+0x3c>
 8000c7e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000c82:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8000c86:	2101      	movs	r1, #1
 8000c88:	40a9      	lsls	r1, r5
 8000c8a:	4219      	tst	r1, r3
 8000c8c:	d108      	bne.n	8000ca0 <__call_exitprocs+0xa4>
 8000c8e:	4790      	blx	r2
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	455b      	cmp	r3, fp
 8000c94:	d1bd      	bne.n	8000c12 <__call_exitprocs+0x16>
 8000c96:	f8da 3000 	ldr.w	r3, [sl]
 8000c9a:	42bb      	cmp	r3, r7
 8000c9c:	d0cc      	beq.n	8000c38 <__call_exitprocs+0x3c>
 8000c9e:	e7b8      	b.n	8000c12 <__call_exitprocs+0x16>
 8000ca0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000ca4:	4219      	tst	r1, r3
 8000ca6:	d104      	bne.n	8000cb2 <__call_exitprocs+0xb6>
 8000ca8:	4648      	mov	r0, r9
 8000caa:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8000cae:	4790      	blx	r2
 8000cb0:	e7ee      	b.n	8000c90 <__call_exitprocs+0x94>
 8000cb2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8000cb6:	4790      	blx	r2
 8000cb8:	e7ea      	b.n	8000c90 <__call_exitprocs+0x94>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	46ba      	mov	sl, r7
 8000cbe:	461f      	mov	r7, r3
 8000cc0:	2f00      	cmp	r7, #0
 8000cc2:	d1ac      	bne.n	8000c1e <__call_exitprocs+0x22>
 8000cc4:	e7ce      	b.n	8000c64 <__call_exitprocs+0x68>
 8000cc6:	bf00      	nop
 8000cc8:	08000d04 	.word	0x08000d04
 8000ccc:	00000000 	.word	0x00000000

08000cd0 <__libc_fini_array>:
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <__libc_fini_array+0x24>)
 8000cd4:	4d08      	ldr	r5, [pc, #32]	; (8000cf8 <__libc_fini_array+0x28>)
 8000cd6:	1aed      	subs	r5, r5, r3
 8000cd8:	10ac      	asrs	r4, r5, #2
 8000cda:	bf18      	it	ne
 8000cdc:	18ed      	addne	r5, r5, r3
 8000cde:	d005      	beq.n	8000cec <__libc_fini_array+0x1c>
 8000ce0:	3c01      	subs	r4, #1
 8000ce2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8000ce6:	4798      	blx	r3
 8000ce8:	2c00      	cmp	r4, #0
 8000cea:	d1f9      	bne.n	8000ce0 <__libc_fini_array+0x10>
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b810 	b.w	8000d14 <_fini>
 8000cf4:	08000d28 	.word	0x08000d28
 8000cf8:	08000d2c 	.word	0x08000d2c

08000cfc <_exit>:
 8000cfc:	e7fe      	b.n	8000cfc <_exit>
 8000cfe:	bf00      	nop
 8000d00:	00000043 	.word	0x00000043

08000d04 <_global_impure_ptr>:
 8000d04:	20000078                                x.. 

08000d08 <_init>:
 8000d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0a:	bf00      	nop
 8000d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0e:	bc08      	pop	{r3}
 8000d10:	469e      	mov	lr, r3
 8000d12:	4770      	bx	lr

08000d14 <_fini>:
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d16:	bf00      	nop
 8000d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1a:	bc08      	pop	{r3}
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	4770      	bx	lr
