
bin/systick.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000428 	.word	0x20000428
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800066c 	.word	0x0800066c

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	0800066c 	.word	0x0800066c
 80001d8:	2000042c 	.word	0x2000042c
 80001dc:	20000428 	.word	0x20000428
 80001e0:	00000000 	.word	0x00000000

080001e4 <main>:
    .thumb_func
    .type	main, %function
  
main:

  push {r4,r5,r6,r7,lr}
 80001e4:	b5f0      	push	{r4, r5, r6, r7, lr}

  bl SetSysClock
 80001e6:	f000 f81b 	bl	8000220 <SetSysClock>

  bl gpio_d_init
 80001ea:	f000 f8a5 	bl	8000338 <gpio_d_init>

  ldr r0,=#(1<<24)-1
 80001ee:	4809      	ldr	r0, [pc, #36]	; (8000214 <SysTick_Handler+0x14>)
  
  bl SysTick_Config
 80001f0:	f000 f88a 	bl	8000308 <SysTick_Config>

080001f4 <halt>:

  halt:  // do nothing but loop

    nop
 80001f4:	bf00      	nop

    b halt
 80001f6:	e7fd      	b.n	80001f4 <halt>

080001f8 <all_done>:

all_done:

  pop {r4,r5,r6,r7,lr}
 80001f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  
  bx lr
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop

08000200 <SysTick_Handler>:
    .thumb_func
    .type	SysTick_Handler, %function
  
SysTick_Handler:

  push {r5,r6,r7,lr}
 8000200:	b5e0      	push	{r5, r6, r7, lr}
  
  ldr r7,=GPIOD_BASE   //toggle Port D pin 15 LED
 8000202:	4f05      	ldr	r7, [pc, #20]	; (8000218 <SysTick_Handler+0x18>)

  ldr r6,[r7,GPIO_ODR]
 8000204:	697e      	ldr	r6, [r7, #20]
  ldr r5,=#(1<<15)
 8000206:	4d05      	ldr	r5, [pc, #20]	; (800021c <SysTick_Handler+0x1c>)
  eor r6,r5
 8000208:	ea86 0605 	eor.w	r6, r6, r5
  str r6,[r7,GPIO_ODR]
 800020c:	617e      	str	r6, [r7, #20]
  
  pop {r5,r6,r7,lr}  
 800020e:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
  
  bx lr
 8000212:	4770      	bx	lr

  bl SetSysClock

  bl gpio_d_init

  ldr r0,=#(1<<24)-1
 8000214:	00ffffff 	.word	0x00ffffff
  
SysTick_Handler:

  push {r5,r6,r7,lr}
  
  ldr r7,=GPIOD_BASE   //toggle Port D pin 15 LED
 8000218:	40020c00 	.word	0x40020c00

  ldr r6,[r7,GPIO_ODR]
  ldr r5,=#(1<<15)
 800021c:	00008000 	.word	0x00008000

08000220 <SetSysClock>:

  /******************************************************************************/
  /*            PLL (clocked by HSE) used as System clock source                */
  /******************************************************************************/

  push {r4,r5,r6,r7,lr}
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}

  ldr r7,=#RCC_BASE
 8000222:	4f26      	ldr	r7, [pc, #152]	; (80002bc <fail_startup+0x4>)

    /* Enable HSE */
  
    ldr r4,[r7,#RCC_CR]
 8000224:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#RCC_CR_HSEON
 8000226:	4d26      	ldr	r5, [pc, #152]	; (80002c0 <fail_startup+0x8>)
    orr r4,r5
 8000228:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CR]
 800022c:	603c      	str	r4, [r7, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */

    ldr r3,=#0x500
 800022e:	4b25      	ldr	r3, [pc, #148]	; (80002c4 <fail_startup+0xc>)

08000230 <Wait_HSE_Ready>:
  
    Wait_HSE_Ready:

      subs r3,#1
 8000230:	3b01      	subs	r3, #1
      beq  fail_startup
 8000232:	d041      	beq.n	80002b8 <fail_startup>
    
      ldr  r4,[r7,#RCC_CR]
 8000234:	683c      	ldr	r4, [r7, #0]
      ldr  r5,=#RCC_CR_HSERDY
 8000236:	4d24      	ldr	r5, [pc, #144]	; (80002c8 <fail_startup+0x10>)
      ands r4,r5
 8000238:	402c      	ands	r4, r5
      beq  Wait_HSE_Ready
 800023a:	d0f9      	beq.n	8000230 <Wait_HSE_Ready>

      /* Enable high performance mode, System frequency up to 168 MHz */
    
    ldr r4,[r7,#RCC_APB1ENR]
 800023c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
    ldr r5,=#RCC_APB1ENR_PWREN
 800023e:	4d23      	ldr	r5, [pc, #140]	; (80002cc <fail_startup+0x14>)
    orr r4,r5
 8000240:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_APB1ENR]
 8000244:	643c      	str	r4, [r7, #64]	; 0x40
    

  ldr r7,=#PWR_BASE
 8000246:	4f22      	ldr	r7, [pc, #136]	; (80002d0 <fail_startup+0x18>)
    
    ldr r4,[r7,#PWR_CR]
 8000248:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#PWR_CR_PMODE
 800024a:	4d22      	ldr	r5, [pc, #136]	; (80002d4 <fail_startup+0x1c>)
    orr r4,r5
 800024c:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#PWR_CR]
 8000250:	603c      	str	r4, [r7, #0]

  ldr r7,=#RCC_BASE
 8000252:	4f1a      	ldr	r7, [pc, #104]	; (80002bc <fail_startup+0x4>)
    
    /* HCLK = SYSCLK / 1*/

    ldr r4,[r7,#RCC_CFGR]
 8000254:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_HPRE_DIV1
 8000256:	4d20      	ldr	r5, [pc, #128]	; (80002d8 <fail_startup+0x20>)
    orr r4,r5
 8000258:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 800025c:	60bc      	str	r4, [r7, #8]
    
    /* PCLK2 = HCLK / 2*/
    
    ldr r4,[r7,#RCC_CFGR]
 800025e:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_PPRE2_DIV2
 8000260:	4d1e      	ldr	r5, [pc, #120]	; (80002dc <fail_startup+0x24>)
    orr r4,r5
 8000262:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000266:	60bc      	str	r4, [r7, #8]
    
    /* PCLK1 = HCLK / 4*/

    ldr r4,[r7,#RCC_CFGR]
 8000268:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_PPRE1_DIV4
 800026a:	4d1d      	ldr	r5, [pc, #116]	; (80002e0 <fail_startup+0x28>)
    orr r4,r5
 800026c:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000270:	60bc      	str	r4, [r7, #8]
    
    /* Configure the main PLL */

    ldr r4,=#( PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) )              
 8000272:	4c1c      	ldr	r4, [pc, #112]	; (80002e4 <fail_startup+0x2c>)
    str r4,[r7,#RCC_PLLCFGR]
 8000274:	607c      	str	r4, [r7, #4]
    
    /* Enable the main PLL */

    ldr r4,[r7,#RCC_CR]
 8000276:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#RCC_CR_PLLON
 8000278:	4d1b      	ldr	r5, [pc, #108]	; (80002e8 <fail_startup+0x30>)
    orr r4,r5
 800027a:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CR]
 800027e:	603c      	str	r4, [r7, #0]

08000280 <Wait_PLL_Ready>:
    
    
    Wait_PLL_Ready:
      ldr r4,[r7,#RCC_CR]
 8000280:	683c      	ldr	r4, [r7, #0]
      ldr r5,=#RCC_CR_PLLRDY
 8000282:	4d1a      	ldr	r5, [pc, #104]	; (80002ec <fail_startup+0x34>)
      ands r4,r5
 8000284:	402c      	ands	r4, r5
      beq Wait_PLL_Ready
 8000286:	d0fb      	beq.n	8000280 <Wait_PLL_Ready>
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */

  ldr r7,=#FLASH_R_BASE   
 8000288:	4f19      	ldr	r7, [pc, #100]	; (80002f0 <fail_startup+0x38>)

    ldr r4,=#(FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS)
 800028a:	4c1a      	ldr	r4, [pc, #104]	; (80002f4 <fail_startup+0x3c>)
    str r4,[r7,#FLASH_ACR]
 800028c:	603c      	str	r4, [r7, #0]

  ldr r7,=#RCC_BASE
 800028e:	4f0b      	ldr	r7, [pc, #44]	; (80002bc <fail_startup+0x4>)
  
    /* Select the main PLL as system clock source */
    
    ldr r4,[r7,#RCC_CFGR]
 8000290:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#~(RCC_CFGR_SW)
 8000292:	4d19      	ldr	r5, [pc, #100]	; (80002f8 <fail_startup+0x40>)
    and r4,r5
 8000294:	ea04 0405 	and.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000298:	60bc      	str	r4, [r7, #8]

    ldr r4,[r7,#RCC_CFGR]
 800029a:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_SW_PLL
 800029c:	4d17      	ldr	r5, [pc, #92]	; (80002fc <fail_startup+0x44>)
    orr r4,r5
 800029e:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 80002a2:	60bc      	str	r4, [r7, #8]

080002a4 <Wait_PLL>:
    
    Wait_PLL:
      ldr r4,[r7,#RCC_CFGR]
 80002a4:	68bc      	ldr	r4, [r7, #8]
      ldr r5,=#RCC_CFGR_SWS
 80002a6:	4d16      	ldr	r5, [pc, #88]	; (8000300 <fail_startup+0x48>)
      and r4,r5
 80002a8:	ea04 0405 	and.w	r4, r4, r5
      ldr r5,=#RCC_CFGR_SWS_PLL
 80002ac:	4d15      	ldr	r5, [pc, #84]	; (8000304 <fail_startup+0x4c>)
      cmp r4,r5
 80002ae:	42ac      	cmp	r4, r5
      bne Wait_PLL
 80002b0:	d1f8      	bne.n	80002a4 <Wait_PLL>
   
    pop {r4,r5,r6,r7,lr}
 80002b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    
    bx lr
 80002b6:	4770      	bx	lr

080002b8 <fail_startup>:
  
  fail_startup:
    
    b fail_startup
 80002b8:	e7fe      	b.n	80002b8 <fail_startup>
 80002ba:	0000      	.short	0x0000
  /*            PLL (clocked by HSE) used as System clock source                */
  /******************************************************************************/

  push {r4,r5,r6,r7,lr}

  ldr r7,=#RCC_BASE
 80002bc:	40023800 	.word	0x40023800

    /* Enable HSE */
  
    ldr r4,[r7,#RCC_CR]
    ldr r5,=#RCC_CR_HSEON
 80002c0:	00010000 	.word	0x00010000
    orr r4,r5
    str r4,[r7,#RCC_CR]
 
  /* Wait till HSE is ready and if Time out is reached exit */

    ldr r3,=#0x500
 80002c4:	00000500 	.word	0x00000500

      subs r3,#1
      beq  fail_startup
    
      ldr  r4,[r7,#RCC_CR]
      ldr  r5,=#RCC_CR_HSERDY
 80002c8:	00020000 	.word	0x00020000
      beq  Wait_HSE_Ready

      /* Enable high performance mode, System frequency up to 168 MHz */
    
    ldr r4,[r7,#RCC_APB1ENR]
    ldr r5,=#RCC_APB1ENR_PWREN
 80002cc:	10000000 	.word	0x10000000
    orr r4,r5
    str r4,[r7,#RCC_APB1ENR]
    

  ldr r7,=#PWR_BASE
 80002d0:	40007000 	.word	0x40007000
    
    ldr r4,[r7,#PWR_CR]
    ldr r5,=#PWR_CR_PMODE
 80002d4:	00004000 	.word	0x00004000
  ldr r7,=#RCC_BASE
    
    /* HCLK = SYSCLK / 1*/

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_HPRE_DIV1
 80002d8:	00000000 	.word	0x00000000
    str r4,[r7,#RCC_CFGR]
    
    /* PCLK2 = HCLK / 2*/
    
    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_PPRE2_DIV2
 80002dc:	00008000 	.word	0x00008000
    str r4,[r7,#RCC_CFGR]
    
    /* PCLK1 = HCLK / 4*/

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_PPRE1_DIV4
 80002e0:	00001400 	.word	0x00001400
    orr r4,r5
    str r4,[r7,#RCC_CFGR]
    
    /* Configure the main PLL */

    ldr r4,=#( PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) )              
 80002e4:	07405408 	.word	0x07405408
    str r4,[r7,#RCC_PLLCFGR]
    
    /* Enable the main PLL */

    ldr r4,[r7,#RCC_CR]
    ldr r5,=#RCC_CR_PLLON
 80002e8:	01000000 	.word	0x01000000
    str r4,[r7,#RCC_CR]
    
    
    Wait_PLL_Ready:
      ldr r4,[r7,#RCC_CR]
      ldr r5,=#RCC_CR_PLLRDY
 80002ec:	02000000 	.word	0x02000000
      ands r4,r5
      beq Wait_PLL_Ready
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */

  ldr r7,=#FLASH_R_BASE   
 80002f0:	40023c00 	.word	0x40023c00

    ldr r4,=#(FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS)
 80002f4:	00000605 	.word	0x00000605
  ldr r7,=#RCC_BASE
  
    /* Select the main PLL as system clock source */
    
    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#~(RCC_CFGR_SW)
 80002f8:	fffffffc 	.word	0xfffffffc
    and r4,r5
    str r4,[r7,#RCC_CFGR]

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_SW_PLL
 80002fc:	00000002 	.word	0x00000002
    orr r4,r5
    str r4,[r7,#RCC_CFGR]
    
    Wait_PLL:
      ldr r4,[r7,#RCC_CFGR]
      ldr r5,=#RCC_CFGR_SWS
 8000300:	0000000c 	.word	0x0000000c
      and r4,r5
      ldr r5,=#RCC_CFGR_SWS_PLL
 8000304:	00000008 	.word	0x00000008

08000308 <SysTick_Config>:
    .thumb_func
    .type	SysTick_Config, %function

SysTick_Config:

  push {r4,r5,r6,r7,lr}
 8000308:	b5f0      	push	{r4, r5, r6, r7, lr}
 

/* set reload register */

    mov r4,r0
 800030a:	4604      	mov	r4, r0

    ldr r7,=#SYST_BASE
 800030c:	4f07      	ldr	r7, [pc, #28]	; (800032c <SysTick_Config_End+0x8>)
    
    ldr r5,=#SYST_RVR_MASK
 800030e:	4d08      	ldr	r5, [pc, #32]	; (8000330 <SysTick_Config_End+0xc>)
    and r4,r5
 8000310:	ea04 0405 	and.w	r4, r4, r5
    sub r4,#1
 8000314:	f1a4 0401 	sub.w	r4, r4, #1
    str r4,[r7,#SYST_RVR]
 8000318:	607c      	str	r4, [r7, #4]

/* Load the SysTick Counter Value */

    mov r4,#0
 800031a:	f04f 0400 	mov.w	r4, #0
    str r4,[r7,SYST_CVR]
 800031e:	60bc      	str	r4, [r7, #8]

/* Use processor clock as clock source, Enable SysTick IRQ, and enable SysTick Timer */
    
    ldr r4,=#(SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE)
 8000320:	4c04      	ldr	r4, [pc, #16]	; (8000334 <SysTick_Config_End+0x10>)
    str r4,[r7,SYST_CSR]
 8000322:	603c      	str	r4, [r7, #0]

08000324 <SysTick_Config_End>:

//   return (0);                                                  /* Function successful */

  SysTick_Config_End:

    pop {r4,r5,r6,r7,lr}
 8000324:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    
    bx lr
 8000328:	4770      	bx	lr
 800032a:	0000      	.short	0x0000

/* set reload register */

    mov r4,r0

    ldr r7,=#SYST_BASE
 800032c:	e000e010 	.word	0xe000e010
    
    ldr r5,=#SYST_RVR_MASK
 8000330:	00ffffff 	.word	0x00ffffff
    mov r4,#0
    str r4,[r7,SYST_CVR]

/* Use processor clock as clock source, Enable SysTick IRQ, and enable SysTick Timer */
    
    ldr r4,=#(SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE)
 8000334:	00000007 	.word	0x00000007

08000338 <gpio_d_init>:

  .text

  FUNCTION gpio_d_init,global

    push {lr}
 8000338:	b500      	push	{lr}

		mov r0,#3						//send 3 as arg to rcc function
 800033a:	f04f 0003 	mov.w	r0, #3
		bl rcc_gpio_enable				//call rcc function
 800033e:	f000 f825 	bl	800038c <rcc_gpio_enable>

		ldr r3, =#GPIOD_BASE			//load r3 with the base address of PORT D
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <gpio_d_init+0x24>)

		ldr r2, =#0x00000000			//load 0 into r2
 8000344:	4a06      	ldr	r2, [pc, #24]	; (8000360 <gpio_d_init+0x28>)
		str r2,[r3,#GPIO_PUPDR]			//write Port D PUPDR register as no pull-up, no pull-down
 8000346:	60da      	str	r2, [r3, #12]
		str r2,[r3,#GPIO_OTYPER]		//write Port D OTYPER register as reset state
 8000348:	605a      	str	r2, [r3, #4]
		str r2,[r3,#GPIO_ODR]			//write 0 to GPIO Port D output data register
 800034a:	615a      	str	r2, [r3, #20]

		ldr r2,=#0x55555555				//set all 16 bits of Port D to outputs
 800034c:	4a05      	ldr	r2, [pc, #20]	; (8000364 <gpio_d_init+0x2c>)
		str r2,[r3,#GPIO_MODER]
 800034e:	601a      	str	r2, [r3, #0]

		ldr r2,=#0xffffffff				//load all ones into r2
 8000350:	4a05      	ldr	r2, [pc, #20]	; (8000368 <gpio_d_init+0x30>)
		str r2,[r3,#GPIO_OSPEEDR]		//set Port D SPEEDR register as high speed
 8000352:	609a      	str	r2, [r3, #8]

		pop {lr}
 8000354:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 8000358:	4770      	bx	lr
 800035a:	0000      	.short	0x0000
    push {lr}

		mov r0,#3						//send 3 as arg to rcc function
		bl rcc_gpio_enable				//call rcc function

		ldr r3, =#GPIOD_BASE			//load r3 with the base address of PORT D
 800035c:	40020c00 	.word	0x40020c00

		ldr r2, =#0x00000000			//load 0 into r2
 8000360:	00000000 	.word	0x00000000
		str r2,[r3,#GPIO_PUPDR]			//write Port D PUPDR register as no pull-up, no pull-down
		str r2,[r3,#GPIO_OTYPER]		//write Port D OTYPER register as reset state
		str r2,[r3,#GPIO_ODR]			//write 0 to GPIO Port D output data register

		ldr r2,=#0x55555555				//set all 16 bits of Port D to outputs
 8000364:	55555555 	.word	0x55555555
		str r2,[r3,#GPIO_MODER]

		ldr r2,=#0xffffffff				//load all ones into r2
 8000368:	ffffffff 	.word	0xffffffff

0800036c <gpio_d_put>:
  
  ENDFUNC gpio_d_init

  FUNCTION gpio_d_put,global

		push {lr}
 800036c:	b500      	push	{lr}

		ldr r3, =#GPIOD_BASE		//load r3 with the base address of Port D
 800036e:	4b02      	ldr	r3, [pc, #8]	; (8000378 <gpio_d_put+0xc>)

		str r0,[r3,#GPIO_ODR]		//write r0 to GPIO Port D output
 8000370:	6158      	str	r0, [r3, #20]

		pop {lr}
 8000372:	f85d eb04 	ldr.w	lr, [sp], #4

		bx lr
 8000376:	4770      	bx	lr

  FUNCTION gpio_d_put,global

		push {lr}

		ldr r3, =#GPIOD_BASE		//load r3 with the base address of Port D
 8000378:	40020c00 	.word	0x40020c00

0800037c <gpio_d_get_current>:

  ENDFUNC gpio_d_put

  FUNCTION gpio_d_get_current,global

        push {lr}
 800037c:	b500      	push	{lr}

        ldr r3,=#GPIOD_BASE         //load r3 with base register address of port D
 800037e:	4b02      	ldr	r3, [pc, #8]	; (8000388 <gpio_d_get_current+0xc>)
        ldr r0,[r3,#GPIO_ODR]       //load r0 (return arg) with GPIO D output data register
 8000380:	6958      	ldr	r0, [r3, #20]

        pop {lr}
 8000382:	f85d eb04 	ldr.w	lr, [sp], #4

        bx lr
 8000386:	4770      	bx	lr

  FUNCTION gpio_d_get_current,global

        push {lr}

        ldr r3,=#GPIOD_BASE         //load r3 with base register address of port D
 8000388:	40020c00 	.word	0x40020c00

0800038c <rcc_gpio_enable>:
   .thumb_func
   .type       rcc_gpio_enable, %function

rcc_gpio_enable:

  mov r3,#4
 800038c:	f04f 0304 	mov.w	r3, #4
  cmp r0,r3
 8000390:	4298      	cmp	r0, r3
  bgt skip_enable
 8000392:	dc08      	bgt.n	80003a6 <skip_enable>
    
    ldr r3,=RCC_BASE
 8000394:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <skip_enable+0x2>)
    ldr r1,[r3, #RCC_AHB1ENR]
 8000396:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#1
 8000398:	f04f 0201 	mov.w	r2, #1
    lsl r2,r0
 800039c:	fa02 f200 	lsl.w	r2, r2, r0
    orr r1,r2
 80003a0:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, RCC_AHB1ENR]
 80003a4:	6319      	str	r1, [r3, #48]	; 0x30

080003a6 <skip_enable>:

  skip_enable:

  bx lr
 80003a6:	4770      	bx	lr

  mov r3,#4
  cmp r0,r3
  bgt skip_enable
    
    ldr r3,=RCC_BASE
 80003a8:	40023800 	.word	0x40023800

080003ac <ADC_IRQHandler>:
*/

FUNCTION Default_Handler

  Infinite_Loop:
    b  Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
 80003ae:	bf00      	nop

080003b0 <Reset_Handler>:
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 80003b0:	4915      	ldr	r1, [pc, #84]	; (8000408 <bloop+0x3e>)
    ldr	r2, =__data_start__	// to start
 80003b2:	4a16      	ldr	r2, [pc, #88]	; (800040c <bloop+0x42>)
    ldr	r3, =__data_end__	// to end
 80003b4:	4b16      	ldr	r3, [pc, #88]	; (8000410 <bloop+0x46>)

080003b6 <loop_data>:

    loop_data:
      cmp	r2, r3
 80003b6:	429a      	cmp	r2, r3
      ittt	lt
 80003b8:	bfbe      	ittt	lt
      ldrlt	r0, [r1], #4
 80003ba:	f851 0b04 	ldrlt.w	r0, [r1], #4
      strlt	r0, [r2], #4
 80003be:	f842 0b04 	strlt.w	r0, [r2], #4
      blt	loop_data
 80003c2:	e7f8      	blt.n	80003b6 <loop_data>
      
    movs    r0, #0
 80003c4:	2000      	movs	r0, #0
    ldr     r1, =__bss_start__
 80003c6:	4913      	ldr	r1, [pc, #76]	; (8000414 <bloop+0x4a>)
    ldr     r2, =__bss_end__
 80003c8:	4a13      	ldr	r2, [pc, #76]	; (8000418 <bloop+0x4e>)

080003ca <bloop>:

    bloop:
      cmp     r1, r2
 80003ca:	4291      	cmp	r1, r2
      itt     lo
 80003cc:	bf3c      	itt	cc
      strlo   r0, [r1], #4
 80003ce:	f841 0b04 	strcc.w	r0, [r1], #4
      blo     bloop
 80003d2:	e7fa      	bcc.n	80003ca <bloop>
    
    bl __libc_init_array
 80003d4:	f000 f840 	bl	8000458 <__libc_init_array>

    ldr	r0, .Lfini
 80003d8:	480a      	ldr	r0, [pc, #40]	; (8000404 <bloop+0x3a>)
    bl	atexit
 80003da:	f000 f827 	bl	800042c <atexit>

    .weak SystemInit
    ldr	r0,=SystemInit
 80003de:	480f      	ldr	r0, [pc, #60]	; (800041c <bloop+0x52>)
    cmp	r0,#0
 80003e0:	2800      	cmp	r0, #0
    it	ne
 80003e2:	bf18      	it	ne
    blxne	r0
 80003e4:	4780      	blxne	r0
    
    ldr	  r3,=0xe000ed14
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <bloop+0x56>)
    ldr   r2,=((1<<4) | (1<<3))
 80003e8:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <bloop+0x5a>)
    str   r2,[r3]
 80003ea:	601a      	str	r2, [r3, #0]
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 80003ec:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <bloop+0x5e>)
    ldr r1,[r3, #RCC_AHB1ENR]
 80003ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#0b11111			/* enable all clocks */
 80003f0:	f04f 021f 	mov.w	r2, #31
    orr r1,r2
 80003f4:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, #RCC_AHB1ENR]
 80003f8:	6319      	str	r1, [r3, #48]	; 0x30
    
    bl  main
 80003fa:	f7ff fef3 	bl	80001e4 <main>
	
    bl  exit
 80003fe:	f000 f81b 	bl	8000438 <exit>
	
    bx  lr
 8000402:	4770      	bx	lr
 8000404:	08000679 	.word	0x08000679
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 8000408:	08000690 	.word	0x08000690
    ldr	r2, =__data_start__	// to start
 800040c:	20000000 	.word	0x20000000
    ldr	r3, =__data_end__	// to end
 8000410:	20000428 	.word	0x20000428
      ldrlt	r0, [r1], #4
      strlt	r0, [r2], #4
      blt	loop_data
      
    movs    r0, #0
    ldr     r1, =__bss_start__
 8000414:	20000428 	.word	0x20000428
    ldr     r2, =__bss_end__
 8000418:	20000444 	.word	0x20000444

    ldr	r0, .Lfini
    bl	atexit

    .weak SystemInit
    ldr	r0,=SystemInit
 800041c:	00000000 	.word	0x00000000
    cmp	r0,#0
    it	ne
    blxne	r0
    
    ldr	  r3,=0xe000ed14
 8000420:	e000ed14 	.word	0xe000ed14
    ldr   r2,=((1<<4) | (1<<3))
 8000424:	00000018 	.word	0x00000018
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 8000428:	40023800 	.word	0x40023800

0800042c <atexit>:
 800042c:	4601      	mov	r1, r0
 800042e:	2000      	movs	r0, #0
 8000430:	4602      	mov	r2, r0
 8000432:	4603      	mov	r3, r0
 8000434:	f000 b838 	b.w	80004a8 <__register_exitproc>

08000438 <exit>:
 8000438:	b508      	push	{r3, lr}
 800043a:	2100      	movs	r1, #0
 800043c:	4604      	mov	r4, r0
 800043e:	f000 f88f 	bl	8000560 <__call_exitprocs>
 8000442:	4b04      	ldr	r3, [pc, #16]	; (8000454 <exit+0x1c>)
 8000444:	6818      	ldr	r0, [r3, #0]
 8000446:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000448:	b103      	cbz	r3, 800044c <exit+0x14>
 800044a:	4798      	blx	r3
 800044c:	4620      	mov	r0, r4
 800044e:	f000 f907 	bl	8000660 <_exit>
 8000452:	bf00      	nop
 8000454:	08000668 	.word	0x08000668

08000458 <__libc_init_array>:
 8000458:	b570      	push	{r4, r5, r6, lr}
 800045a:	4e0f      	ldr	r6, [pc, #60]	; (8000498 <__libc_init_array+0x40>)
 800045c:	4d0f      	ldr	r5, [pc, #60]	; (800049c <__libc_init_array+0x44>)
 800045e:	1b76      	subs	r6, r6, r5
 8000460:	10b6      	asrs	r6, r6, #2
 8000462:	bf18      	it	ne
 8000464:	2400      	movne	r4, #0
 8000466:	d005      	beq.n	8000474 <__libc_init_array+0x1c>
 8000468:	3401      	adds	r4, #1
 800046a:	f855 3b04 	ldr.w	r3, [r5], #4
 800046e:	4798      	blx	r3
 8000470:	42a6      	cmp	r6, r4
 8000472:	d1f9      	bne.n	8000468 <__libc_init_array+0x10>
 8000474:	4e0a      	ldr	r6, [pc, #40]	; (80004a0 <__libc_init_array+0x48>)
 8000476:	4d0b      	ldr	r5, [pc, #44]	; (80004a4 <__libc_init_array+0x4c>)
 8000478:	1b76      	subs	r6, r6, r5
 800047a:	f000 f8f7 	bl	800066c <_init>
 800047e:	10b6      	asrs	r6, r6, #2
 8000480:	bf18      	it	ne
 8000482:	2400      	movne	r4, #0
 8000484:	d006      	beq.n	8000494 <__libc_init_array+0x3c>
 8000486:	3401      	adds	r4, #1
 8000488:	f855 3b04 	ldr.w	r3, [r5], #4
 800048c:	4798      	blx	r3
 800048e:	42a6      	cmp	r6, r4
 8000490:	d1f9      	bne.n	8000486 <__libc_init_array+0x2e>
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	bf00      	nop
 8000498:	08000684 	.word	0x08000684
 800049c:	08000684 	.word	0x08000684
 80004a0:	0800068c 	.word	0x0800068c
 80004a4:	08000684 	.word	0x08000684

080004a8 <__register_exitproc>:
 80004a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004ac:	4c25      	ldr	r4, [pc, #148]	; (8000544 <__register_exitproc+0x9c>)
 80004ae:	6825      	ldr	r5, [r4, #0]
 80004b0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80004b4:	4606      	mov	r6, r0
 80004b6:	4688      	mov	r8, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b3cc      	cbz	r4, 8000532 <__register_exitproc+0x8a>
 80004be:	6860      	ldr	r0, [r4, #4]
 80004c0:	281f      	cmp	r0, #31
 80004c2:	dc18      	bgt.n	80004f6 <__register_exitproc+0x4e>
 80004c4:	1c43      	adds	r3, r0, #1
 80004c6:	b17e      	cbz	r6, 80004e8 <__register_exitproc+0x40>
 80004c8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80004cc:	2101      	movs	r1, #1
 80004ce:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80004d2:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 80004d6:	fa01 f200 	lsl.w	r2, r1, r0
 80004da:	4317      	orrs	r7, r2
 80004dc:	2e02      	cmp	r6, #2
 80004de:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 80004e2:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 80004e6:	d01e      	beq.n	8000526 <__register_exitproc+0x7e>
 80004e8:	3002      	adds	r0, #2
 80004ea:	6063      	str	r3, [r4, #4]
 80004ec:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 80004f0:	2000      	movs	r0, #0
 80004f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f6:	4b14      	ldr	r3, [pc, #80]	; (8000548 <__register_exitproc+0xa0>)
 80004f8:	b303      	cbz	r3, 800053c <__register_exitproc+0x94>
 80004fa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80004fe:	f3af 8000 	nop.w
 8000502:	4604      	mov	r4, r0
 8000504:	b1d0      	cbz	r0, 800053c <__register_exitproc+0x94>
 8000506:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800050a:	2700      	movs	r7, #0
 800050c:	e880 0088 	stmia.w	r0, {r3, r7}
 8000510:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000514:	4638      	mov	r0, r7
 8000516:	2301      	movs	r3, #1
 8000518:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800051c:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8000520:	2e00      	cmp	r6, #0
 8000522:	d0e1      	beq.n	80004e8 <__register_exitproc+0x40>
 8000524:	e7d0      	b.n	80004c8 <__register_exitproc+0x20>
 8000526:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800052a:	430a      	orrs	r2, r1
 800052c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8000530:	e7da      	b.n	80004e8 <__register_exitproc+0x40>
 8000532:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000536:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800053a:	e7c0      	b.n	80004be <__register_exitproc+0x16>
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000544:	08000668 	.word	0x08000668
 8000548:	00000000 	.word	0x00000000

0800054c <register_fini>:
 800054c:	4b02      	ldr	r3, [pc, #8]	; (8000558 <register_fini+0xc>)
 800054e:	b113      	cbz	r3, 8000556 <register_fini+0xa>
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <register_fini+0x10>)
 8000552:	f7ff bf6b 	b.w	800042c <atexit>
 8000556:	4770      	bx	lr
 8000558:	00000000 	.word	0x00000000
 800055c:	08000635 	.word	0x08000635

08000560 <__call_exitprocs>:
 8000560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000564:	4b31      	ldr	r3, [pc, #196]	; (800062c <__call_exitprocs+0xcc>)
 8000566:	b083      	sub	sp, #12
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8000570:	4681      	mov	r9, r0
 8000572:	460e      	mov	r6, r1
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	9b00      	ldr	r3, [sp, #0]
 8000578:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
 800057c:	b327      	cbz	r7, 80005c8 <__call_exitprocs+0x68>
 800057e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8000582:	687c      	ldr	r4, [r7, #4]
 8000584:	1e65      	subs	r5, r4, #1
 8000586:	d40e      	bmi.n	80005a6 <__call_exitprocs+0x46>
 8000588:	3401      	adds	r4, #1
 800058a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800058e:	f04f 0800 	mov.w	r8, #0
 8000592:	b1e6      	cbz	r6, 80005ce <__call_exitprocs+0x6e>
 8000594:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8000598:	42b3      	cmp	r3, r6
 800059a:	d018      	beq.n	80005ce <__call_exitprocs+0x6e>
 800059c:	3d01      	subs	r5, #1
 800059e:	1c6b      	adds	r3, r5, #1
 80005a0:	f1a4 0404 	sub.w	r4, r4, #4
 80005a4:	d1f5      	bne.n	8000592 <__call_exitprocs+0x32>
 80005a6:	4b22      	ldr	r3, [pc, #136]	; (8000630 <__call_exitprocs+0xd0>)
 80005a8:	b173      	cbz	r3, 80005c8 <__call_exitprocs+0x68>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d136      	bne.n	800061e <__call_exitprocs+0xbe>
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d034      	beq.n	8000620 <__call_exitprocs+0xc0>
 80005b6:	4638      	mov	r0, r7
 80005b8:	f8ca 3000 	str.w	r3, [sl]
 80005bc:	f3af 8000 	nop.w
 80005c0:	f8da 7000 	ldr.w	r7, [sl]
 80005c4:	2f00      	cmp	r7, #0
 80005c6:	d1dc      	bne.n	8000582 <__call_exitprocs+0x22>
 80005c8:	b003      	add	sp, #12
 80005ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6822      	ldr	r2, [r4, #0]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	42ab      	cmp	r3, r5
 80005d6:	bf0c      	ite	eq
 80005d8:	607d      	streq	r5, [r7, #4]
 80005da:	f8c4 8000 	strne.w	r8, [r4]
 80005de:	2a00      	cmp	r2, #0
 80005e0:	d0dc      	beq.n	800059c <__call_exitprocs+0x3c>
 80005e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80005e6:	f8d7 b004 	ldr.w	fp, [r7, #4]
 80005ea:	2101      	movs	r1, #1
 80005ec:	40a9      	lsls	r1, r5
 80005ee:	4219      	tst	r1, r3
 80005f0:	d108      	bne.n	8000604 <__call_exitprocs+0xa4>
 80005f2:	4790      	blx	r2
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	455b      	cmp	r3, fp
 80005f8:	d1bd      	bne.n	8000576 <__call_exitprocs+0x16>
 80005fa:	f8da 3000 	ldr.w	r3, [sl]
 80005fe:	42bb      	cmp	r3, r7
 8000600:	d0cc      	beq.n	800059c <__call_exitprocs+0x3c>
 8000602:	e7b8      	b.n	8000576 <__call_exitprocs+0x16>
 8000604:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000608:	4219      	tst	r1, r3
 800060a:	d104      	bne.n	8000616 <__call_exitprocs+0xb6>
 800060c:	4648      	mov	r0, r9
 800060e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8000612:	4790      	blx	r2
 8000614:	e7ee      	b.n	80005f4 <__call_exitprocs+0x94>
 8000616:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800061a:	4790      	blx	r2
 800061c:	e7ea      	b.n	80005f4 <__call_exitprocs+0x94>
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	46ba      	mov	sl, r7
 8000622:	461f      	mov	r7, r3
 8000624:	2f00      	cmp	r7, #0
 8000626:	d1ac      	bne.n	8000582 <__call_exitprocs+0x22>
 8000628:	e7ce      	b.n	80005c8 <__call_exitprocs+0x68>
 800062a:	bf00      	nop
 800062c:	08000668 	.word	0x08000668
 8000630:	00000000 	.word	0x00000000

08000634 <__libc_fini_array>:
 8000634:	b538      	push	{r3, r4, r5, lr}
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <__libc_fini_array+0x24>)
 8000638:	4d08      	ldr	r5, [pc, #32]	; (800065c <__libc_fini_array+0x28>)
 800063a:	1aed      	subs	r5, r5, r3
 800063c:	10ac      	asrs	r4, r5, #2
 800063e:	bf18      	it	ne
 8000640:	18ed      	addne	r5, r5, r3
 8000642:	d005      	beq.n	8000650 <__libc_fini_array+0x1c>
 8000644:	3c01      	subs	r4, #1
 8000646:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800064a:	4798      	blx	r3
 800064c:	2c00      	cmp	r4, #0
 800064e:	d1f9      	bne.n	8000644 <__libc_fini_array+0x10>
 8000650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000654:	f000 b810 	b.w	8000678 <_fini>
 8000658:	0800068c 	.word	0x0800068c
 800065c:	08000690 	.word	0x08000690

08000660 <_exit>:
 8000660:	e7fe      	b.n	8000660 <_exit>
 8000662:	bf00      	nop
 8000664:	00000043 	.word	0x00000043

08000668 <_global_impure_ptr>:
 8000668:	20000000                                ... 

0800066c <_init>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	bf00      	nop
 8000670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000672:	bc08      	pop	{r3}
 8000674:	469e      	mov	lr, r3
 8000676:	4770      	bx	lr

08000678 <_fini>:
 8000678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067a:	bf00      	nop
 800067c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067e:	bc08      	pop	{r3}
 8000680:	469e      	mov	lr, r3
 8000682:	4770      	bx	lr
