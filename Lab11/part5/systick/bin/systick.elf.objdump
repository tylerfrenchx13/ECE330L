
bin/systick.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000430 	.word	0x20000430
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080006a4 	.word	0x080006a4

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	080006a4 	.word	0x080006a4
 80001d8:	20000434 	.word	0x20000434
 80001dc:	20000430 	.word	0x20000430
 80001e0:	00000000 	.word	0x00000000

080001e4 <main>:
#define LEDs_ODR_Base (0x40020c14)      /* LEDs Port D ODR Address */

unsigned int *pLEDs = (unsigned int*)LEDs_ODR_Base;     /* Create pointer to Port D - ODR Reg */

int main()
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
    SetSysClock();                        //set system clock    
 80001e8:	f000 f818 	bl	800021c <SetSysClock>
  
    gpio_d_init();                        //initialize Port D (LEDs)
 80001ec:	f000 f8c0 	bl	8000370 <gpio_d_init>
  
    SysTick_Config(reload_value);         //configure SysTick System Timer
 80001f0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80001f4:	f000 f886 	bl	8000304 <SysTick_Config>
  
  do { 
    
  } while (1);                          //loop forever
 80001f8:	e7fe      	b.n	80001f8 <main+0x14>
 80001fa:	bf00      	nop

080001fc <SysTick_Handler>:

  return 0;
}

void SysTick_Handler (void)     //ISR - SysTick Interrupt Service Routine
{    
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
    *pLEDs ^= 1 << 15;                  //toggle Port D - LED 15
}
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Handler+0x1c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a04      	ldr	r2, [pc, #16]	; (8000218 <SysTick_Handler+0x1c>)
 8000206:	6812      	ldr	r2, [r2, #0]
 8000208:	6812      	ldr	r2, [r2, #0]
 800020a:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	20000000 	.word	0x20000000

0800021c <SetSysClock>:

  /******************************************************************************/
  /*            PLL (clocked by HSE) used as System clock source                */
  /******************************************************************************/

  push {r4,r5,r6,r7,lr}
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}

  ldr r7,=#RCC_BASE
 800021e:	4f26      	ldr	r7, [pc, #152]	; (80002b8 <fail_startup+0x4>)

    /* Enable HSE */
  
    ldr r4,[r7,#RCC_CR]
 8000220:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#RCC_CR_HSEON
 8000222:	4d26      	ldr	r5, [pc, #152]	; (80002bc <fail_startup+0x8>)
    orr r4,r5
 8000224:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CR]
 8000228:	603c      	str	r4, [r7, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */

    ldr r3,=#0x500
 800022a:	4b25      	ldr	r3, [pc, #148]	; (80002c0 <fail_startup+0xc>)

0800022c <Wait_HSE_Ready>:
  
    Wait_HSE_Ready:

      subs r3,#1
 800022c:	3b01      	subs	r3, #1
      beq  fail_startup
 800022e:	d041      	beq.n	80002b4 <fail_startup>
    
      ldr  r4,[r7,#RCC_CR]
 8000230:	683c      	ldr	r4, [r7, #0]
      ldr  r5,=#RCC_CR_HSERDY
 8000232:	4d24      	ldr	r5, [pc, #144]	; (80002c4 <fail_startup+0x10>)
      ands r4,r5
 8000234:	402c      	ands	r4, r5
      beq  Wait_HSE_Ready
 8000236:	d0f9      	beq.n	800022c <Wait_HSE_Ready>

      /* Enable high performance mode, System frequency up to 168 MHz */
    
    ldr r4,[r7,#RCC_APB1ENR]
 8000238:	6c3c      	ldr	r4, [r7, #64]	; 0x40
    ldr r5,=#RCC_APB1ENR_PWREN
 800023a:	4d23      	ldr	r5, [pc, #140]	; (80002c8 <fail_startup+0x14>)
    orr r4,r5
 800023c:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_APB1ENR]
 8000240:	643c      	str	r4, [r7, #64]	; 0x40
    

  ldr r7,=#PWR_BASE
 8000242:	4f22      	ldr	r7, [pc, #136]	; (80002cc <fail_startup+0x18>)
    
    ldr r4,[r7,#PWR_CR]
 8000244:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#PWR_CR_PMODE
 8000246:	4d22      	ldr	r5, [pc, #136]	; (80002d0 <fail_startup+0x1c>)
    orr r4,r5
 8000248:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#PWR_CR]
 800024c:	603c      	str	r4, [r7, #0]

  ldr r7,=#RCC_BASE
 800024e:	4f1a      	ldr	r7, [pc, #104]	; (80002b8 <fail_startup+0x4>)
    
    /* HCLK = SYSCLK / 1*/

    ldr r4,[r7,#RCC_CFGR]
 8000250:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_HPRE_DIV1
 8000252:	4d20      	ldr	r5, [pc, #128]	; (80002d4 <fail_startup+0x20>)
    orr r4,r5
 8000254:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000258:	60bc      	str	r4, [r7, #8]
    
    /* PCLK2 = HCLK / 2*/
    
    ldr r4,[r7,#RCC_CFGR]
 800025a:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_PPRE2_DIV2
 800025c:	4d1e      	ldr	r5, [pc, #120]	; (80002d8 <fail_startup+0x24>)
    orr r4,r5
 800025e:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000262:	60bc      	str	r4, [r7, #8]
    
    /* PCLK1 = HCLK / 4*/

    ldr r4,[r7,#RCC_CFGR]
 8000264:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_PPRE1_DIV4
 8000266:	4d1d      	ldr	r5, [pc, #116]	; (80002dc <fail_startup+0x28>)
    orr r4,r5
 8000268:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 800026c:	60bc      	str	r4, [r7, #8]
    
    /* Configure the main PLL */

    ldr r4,=#( PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) )              
 800026e:	4c1c      	ldr	r4, [pc, #112]	; (80002e0 <fail_startup+0x2c>)
    str r4,[r7,#RCC_PLLCFGR]
 8000270:	607c      	str	r4, [r7, #4]
    
    /* Enable the main PLL */

    ldr r4,[r7,#RCC_CR]
 8000272:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#RCC_CR_PLLON
 8000274:	4d1b      	ldr	r5, [pc, #108]	; (80002e4 <fail_startup+0x30>)
    orr r4,r5
 8000276:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CR]
 800027a:	603c      	str	r4, [r7, #0]

0800027c <Wait_PLL_Ready>:
    
    
    Wait_PLL_Ready:
      ldr r4,[r7,#RCC_CR]
 800027c:	683c      	ldr	r4, [r7, #0]
      ldr r5,=#RCC_CR_PLLRDY
 800027e:	4d1a      	ldr	r5, [pc, #104]	; (80002e8 <fail_startup+0x34>)
      ands r4,r5
 8000280:	402c      	ands	r4, r5
      beq Wait_PLL_Ready
 8000282:	d0fb      	beq.n	800027c <Wait_PLL_Ready>
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */

  ldr r7,=#FLASH_R_BASE   
 8000284:	4f19      	ldr	r7, [pc, #100]	; (80002ec <fail_startup+0x38>)

    ldr r4,=#(FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS)
 8000286:	4c1a      	ldr	r4, [pc, #104]	; (80002f0 <fail_startup+0x3c>)
    str r4,[r7,#FLASH_ACR]
 8000288:	603c      	str	r4, [r7, #0]

  ldr r7,=#RCC_BASE
 800028a:	4f0b      	ldr	r7, [pc, #44]	; (80002b8 <fail_startup+0x4>)
  
    /* Select the main PLL as system clock source */
    
    ldr r4,[r7,#RCC_CFGR]
 800028c:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#~(RCC_CFGR_SW)
 800028e:	4d19      	ldr	r5, [pc, #100]	; (80002f4 <fail_startup+0x40>)
    and r4,r5
 8000290:	ea04 0405 	and.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000294:	60bc      	str	r4, [r7, #8]

    ldr r4,[r7,#RCC_CFGR]
 8000296:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_SW_PLL
 8000298:	4d17      	ldr	r5, [pc, #92]	; (80002f8 <fail_startup+0x44>)
    orr r4,r5
 800029a:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 800029e:	60bc      	str	r4, [r7, #8]

080002a0 <Wait_PLL>:
    
    Wait_PLL:
      ldr r4,[r7,#RCC_CFGR]
 80002a0:	68bc      	ldr	r4, [r7, #8]
      ldr r5,=#RCC_CFGR_SWS
 80002a2:	4d16      	ldr	r5, [pc, #88]	; (80002fc <fail_startup+0x48>)
      and r4,r5
 80002a4:	ea04 0405 	and.w	r4, r4, r5
      ldr r5,=#RCC_CFGR_SWS_PLL
 80002a8:	4d15      	ldr	r5, [pc, #84]	; (8000300 <fail_startup+0x4c>)
      cmp r4,r5
 80002aa:	42ac      	cmp	r4, r5
      bne Wait_PLL
 80002ac:	d1f8      	bne.n	80002a0 <Wait_PLL>
   
    pop {r4,r5,r6,r7,lr}
 80002ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    
    bx lr
 80002b2:	4770      	bx	lr

080002b4 <fail_startup>:
  
  fail_startup:
    
    b fail_startup
 80002b4:	e7fe      	b.n	80002b4 <fail_startup>
 80002b6:	0000      	.short	0x0000
  /*            PLL (clocked by HSE) used as System clock source                */
  /******************************************************************************/

  push {r4,r5,r6,r7,lr}

  ldr r7,=#RCC_BASE
 80002b8:	40023800 	.word	0x40023800

    /* Enable HSE */
  
    ldr r4,[r7,#RCC_CR]
    ldr r5,=#RCC_CR_HSEON
 80002bc:	00010000 	.word	0x00010000
    orr r4,r5
    str r4,[r7,#RCC_CR]
 
  /* Wait till HSE is ready and if Time out is reached exit */

    ldr r3,=#0x500
 80002c0:	00000500 	.word	0x00000500

      subs r3,#1
      beq  fail_startup
    
      ldr  r4,[r7,#RCC_CR]
      ldr  r5,=#RCC_CR_HSERDY
 80002c4:	00020000 	.word	0x00020000
      beq  Wait_HSE_Ready

      /* Enable high performance mode, System frequency up to 168 MHz */
    
    ldr r4,[r7,#RCC_APB1ENR]
    ldr r5,=#RCC_APB1ENR_PWREN
 80002c8:	10000000 	.word	0x10000000
    orr r4,r5
    str r4,[r7,#RCC_APB1ENR]
    

  ldr r7,=#PWR_BASE
 80002cc:	40007000 	.word	0x40007000
    
    ldr r4,[r7,#PWR_CR]
    ldr r5,=#PWR_CR_PMODE
 80002d0:	00004000 	.word	0x00004000
  ldr r7,=#RCC_BASE
    
    /* HCLK = SYSCLK / 1*/

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_HPRE_DIV1
 80002d4:	00000000 	.word	0x00000000
    str r4,[r7,#RCC_CFGR]
    
    /* PCLK2 = HCLK / 2*/
    
    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_PPRE2_DIV2
 80002d8:	00008000 	.word	0x00008000
    str r4,[r7,#RCC_CFGR]
    
    /* PCLK1 = HCLK / 4*/

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_PPRE1_DIV4
 80002dc:	00001400 	.word	0x00001400
    orr r4,r5
    str r4,[r7,#RCC_CFGR]
    
    /* Configure the main PLL */

    ldr r4,=#( PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) )              
 80002e0:	07405408 	.word	0x07405408
    str r4,[r7,#RCC_PLLCFGR]
    
    /* Enable the main PLL */

    ldr r4,[r7,#RCC_CR]
    ldr r5,=#RCC_CR_PLLON
 80002e4:	01000000 	.word	0x01000000
    str r4,[r7,#RCC_CR]
    
    
    Wait_PLL_Ready:
      ldr r4,[r7,#RCC_CR]
      ldr r5,=#RCC_CR_PLLRDY
 80002e8:	02000000 	.word	0x02000000
      ands r4,r5
      beq Wait_PLL_Ready
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */

  ldr r7,=#FLASH_R_BASE   
 80002ec:	40023c00 	.word	0x40023c00

    ldr r4,=#(FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS)
 80002f0:	00000605 	.word	0x00000605
  ldr r7,=#RCC_BASE
  
    /* Select the main PLL as system clock source */
    
    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#~(RCC_CFGR_SW)
 80002f4:	fffffffc 	.word	0xfffffffc
    and r4,r5
    str r4,[r7,#RCC_CFGR]

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_SW_PLL
 80002f8:	00000002 	.word	0x00000002
    orr r4,r5
    str r4,[r7,#RCC_CFGR]
    
    Wait_PLL:
      ldr r4,[r7,#RCC_CFGR]
      ldr r5,=#RCC_CFGR_SWS
 80002fc:	0000000c 	.word	0x0000000c
      and r4,r5
      ldr r5,=#RCC_CFGR_SWS_PLL
 8000300:	00000008 	.word	0x00000008

08000304 <SysTick_Config>:
    unsigned int SYST_CALIB;
};


unsigned int SysTick_Config(unsigned int ticks)
{
 8000304:	b480      	push	{r7}
 8000306:	b087      	sub	sp, #28
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
    /* set reload register */
    if (ticks > ((1<<24)-1)) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000312:	d301      	bcc.n	8000318 <SysTick_Config+0x14>
        ticks = 0;
 8000314:	2300      	movs	r3, #0
 8000316:	607b      	str	r3, [r7, #4]
    }
    ticks /= 2; 
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	085b      	lsrs	r3, r3, #1
 800031c:	607b      	str	r3, [r7, #4]
    SysTick->SYST_RVR = ticks;       /* set reload register - don't allow bigger than 2^24-1! */
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <SysTick_Config+0x5c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	687a      	ldr	r2, [r7, #4]
 8000324:	605a      	str	r2, [r3, #4]

    SysTick->SYST_CVR = 0;       /* Load the SysTick Counter Value */
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <SysTick_Config+0x5c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  
    //CLKSOURCE: SYST_CSR + 2   //Clock Source is Processor Clock
    unsigned int *clksrc = (unsigned int*)SysTick_BASE + 2;     /* Create pointer to Port D - ODR Reg */
 800032e:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <SysTick_Config+0x60>)
 8000330:	617b      	str	r3, [r7, #20]
    //TICKINT: SYST_CST + 1     //Enable SysTick IRQ
    unsigned int *tickint = (unsigned int*)SysTick_BASE + 1; 
 8000332:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <SysTick_Config+0x64>)
 8000334:	613b      	str	r3, [r7, #16]
    //ENABLE: SYST_CST + 0      //Enable SysTick Timer Count
    unsigned int *enable = (unsigned int*)SysTick_BASE;  
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <SysTick_Config+0x68>)
 8000338:	60fb      	str	r3, [r7, #12]
    SysTick->SYST_CSR = (*clksrc | *tickint | *enable);
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <SysTick_Config+0x5c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	697a      	ldr	r2, [r7, #20]
 8000340:	6811      	ldr	r1, [r2, #0]
 8000342:	693a      	ldr	r2, [r7, #16]
 8000344:	6812      	ldr	r2, [r2, #0]
 8000346:	4311      	orrs	r1, r2
 8000348:	68fa      	ldr	r2, [r7, #12]
 800034a:	6812      	ldr	r2, [r2, #0]
 800034c:	430a      	orrs	r2, r1
 800034e:	601a      	str	r2, [r3, #0]
   
    return (0);                           /* Function successful but we won't check */                          
 8000350:	2300      	movs	r3, #0
}
 8000352:	4618      	mov	r0, r3
 8000354:	371c      	adds	r7, #28
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20000004 	.word	0x20000004
 8000364:	e000e018 	.word	0xe000e018
 8000368:	e000e014 	.word	0xe000e014
 800036c:	e000e010 	.word	0xe000e010

08000370 <gpio_d_init>:

  .text

  FUNCTION gpio_d_init,global

    push {lr}
 8000370:	b500      	push	{lr}

		mov r0,#3						//send 3 as arg to rcc function
 8000372:	f04f 0003 	mov.w	r0, #3
		bl rcc_gpio_enable				//call rcc function
 8000376:	f000 f825 	bl	80003c4 <rcc_gpio_enable>

		ldr r3, =#GPIOD_BASE			//load r3 with the base address of PORT D
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <gpio_d_init+0x24>)

		ldr r2, =#0x00000000			//load 0 into r2
 800037c:	4a06      	ldr	r2, [pc, #24]	; (8000398 <gpio_d_init+0x28>)
		str r2,[r3,#GPIO_PUPDR]			//write Port D PUPDR register as no pull-up, no pull-down
 800037e:	60da      	str	r2, [r3, #12]
		str r2,[r3,#GPIO_OTYPER]		//write Port D OTYPER register as reset state
 8000380:	605a      	str	r2, [r3, #4]
		str r2,[r3,#GPIO_ODR]			//write 0 to GPIO Port D output data register
 8000382:	615a      	str	r2, [r3, #20]

		ldr r2,=#0x55555555				//set all 16 bits of Port D to outputs
 8000384:	4a05      	ldr	r2, [pc, #20]	; (800039c <gpio_d_init+0x2c>)
		str r2,[r3,#GPIO_MODER]
 8000386:	601a      	str	r2, [r3, #0]

		ldr r2,=#0xffffffff				//load all ones into r2
 8000388:	4a05      	ldr	r2, [pc, #20]	; (80003a0 <gpio_d_init+0x30>)
		str r2,[r3,#GPIO_OSPEEDR]		//set Port D SPEEDR register as high speed
 800038a:	609a      	str	r2, [r3, #8]

		pop {lr}
 800038c:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 8000390:	4770      	bx	lr
 8000392:	0000      	.short	0x0000
    push {lr}

		mov r0,#3						//send 3 as arg to rcc function
		bl rcc_gpio_enable				//call rcc function

		ldr r3, =#GPIOD_BASE			//load r3 with the base address of PORT D
 8000394:	40020c00 	.word	0x40020c00

		ldr r2, =#0x00000000			//load 0 into r2
 8000398:	00000000 	.word	0x00000000
		str r2,[r3,#GPIO_PUPDR]			//write Port D PUPDR register as no pull-up, no pull-down
		str r2,[r3,#GPIO_OTYPER]		//write Port D OTYPER register as reset state
		str r2,[r3,#GPIO_ODR]			//write 0 to GPIO Port D output data register

		ldr r2,=#0x55555555				//set all 16 bits of Port D to outputs
 800039c:	55555555 	.word	0x55555555
		str r2,[r3,#GPIO_MODER]

		ldr r2,=#0xffffffff				//load all ones into r2
 80003a0:	ffffffff 	.word	0xffffffff

080003a4 <gpio_d_put>:
  
  ENDFUNC gpio_d_init

  FUNCTION gpio_d_put,global

		push {lr}
 80003a4:	b500      	push	{lr}

		ldr r3, =#GPIOD_BASE		//load r3 with the base address of Port D
 80003a6:	4b02      	ldr	r3, [pc, #8]	; (80003b0 <gpio_d_put+0xc>)

		str r0,[r3,#GPIO_ODR]		//write r0 to GPIO Port D output
 80003a8:	6158      	str	r0, [r3, #20]

		pop {lr}
 80003aa:	f85d eb04 	ldr.w	lr, [sp], #4

		bx lr
 80003ae:	4770      	bx	lr

  FUNCTION gpio_d_put,global

		push {lr}

		ldr r3, =#GPIOD_BASE		//load r3 with the base address of Port D
 80003b0:	40020c00 	.word	0x40020c00

080003b4 <gpio_d_get_current>:

  ENDFUNC gpio_d_put

  FUNCTION gpio_d_get_current,global

        push {lr}
 80003b4:	b500      	push	{lr}

        ldr r3,=#GPIOD_BASE         //load r3 with base register address of port D
 80003b6:	4b02      	ldr	r3, [pc, #8]	; (80003c0 <gpio_d_get_current+0xc>)
        ldr r0,[r3,#GPIO_ODR]       //load r0 (return arg) with GPIO D output data register
 80003b8:	6958      	ldr	r0, [r3, #20]

        pop {lr}
 80003ba:	f85d eb04 	ldr.w	lr, [sp], #4

        bx lr
 80003be:	4770      	bx	lr

  FUNCTION gpio_d_get_current,global

        push {lr}

        ldr r3,=#GPIOD_BASE         //load r3 with base register address of port D
 80003c0:	40020c00 	.word	0x40020c00

080003c4 <rcc_gpio_enable>:
   .thumb_func
   .type       rcc_gpio_enable, %function

rcc_gpio_enable:

  mov r3,#4
 80003c4:	f04f 0304 	mov.w	r3, #4
  cmp r0,r3
 80003c8:	4298      	cmp	r0, r3
  bgt skip_enable
 80003ca:	dc08      	bgt.n	80003de <skip_enable>
    
    ldr r3,=RCC_BASE
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <skip_enable+0x2>)
    ldr r1,[r3, #RCC_AHB1ENR]
 80003ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#1
 80003d0:	f04f 0201 	mov.w	r2, #1
    lsl r2,r0
 80003d4:	fa02 f200 	lsl.w	r2, r2, r0
    orr r1,r2
 80003d8:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, RCC_AHB1ENR]
 80003dc:	6319      	str	r1, [r3, #48]	; 0x30

080003de <skip_enable>:

  skip_enable:

  bx lr
 80003de:	4770      	bx	lr

  mov r3,#4
  cmp r0,r3
  bgt skip_enable
    
    ldr r3,=RCC_BASE
 80003e0:	40023800 	.word	0x40023800

080003e4 <ADC_IRQHandler>:
*/

FUNCTION Default_Handler

  Infinite_Loop:
    b  Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC_IRQHandler>
 80003e6:	bf00      	nop

080003e8 <Reset_Handler>:
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 80003e8:	4915      	ldr	r1, [pc, #84]	; (8000440 <bloop+0x3e>)
    ldr	r2, =__data_start__	// to start
 80003ea:	4a16      	ldr	r2, [pc, #88]	; (8000444 <bloop+0x42>)
    ldr	r3, =__data_end__	// to end
 80003ec:	4b16      	ldr	r3, [pc, #88]	; (8000448 <bloop+0x46>)

080003ee <loop_data>:

    loop_data:
      cmp	r2, r3
 80003ee:	429a      	cmp	r2, r3
      ittt	lt
 80003f0:	bfbe      	ittt	lt
      ldrlt	r0, [r1], #4
 80003f2:	f851 0b04 	ldrlt.w	r0, [r1], #4
      strlt	r0, [r2], #4
 80003f6:	f842 0b04 	strlt.w	r0, [r2], #4
      blt	loop_data
 80003fa:	e7f8      	blt.n	80003ee <loop_data>
      
    movs    r0, #0
 80003fc:	2000      	movs	r0, #0
    ldr     r1, =__bss_start__
 80003fe:	4913      	ldr	r1, [pc, #76]	; (800044c <bloop+0x4a>)
    ldr     r2, =__bss_end__
 8000400:	4a13      	ldr	r2, [pc, #76]	; (8000450 <bloop+0x4e>)

08000402 <bloop>:

    bloop:
      cmp     r1, r2
 8000402:	4291      	cmp	r1, r2
      itt     lo
 8000404:	bf3c      	itt	cc
      strlo   r0, [r1], #4
 8000406:	f841 0b04 	strcc.w	r0, [r1], #4
      blo     bloop
 800040a:	e7fa      	bcc.n	8000402 <bloop>
    
    bl __libc_init_array
 800040c:	f000 f840 	bl	8000490 <__libc_init_array>

    ldr	r0, .Lfini
 8000410:	480a      	ldr	r0, [pc, #40]	; (800043c <bloop+0x3a>)
    bl	atexit
 8000412:	f000 f827 	bl	8000464 <atexit>

    .weak SystemInit
    ldr	r0,=SystemInit
 8000416:	480f      	ldr	r0, [pc, #60]	; (8000454 <bloop+0x52>)
    cmp	r0,#0
 8000418:	2800      	cmp	r0, #0
    it	ne
 800041a:	bf18      	it	ne
    blxne	r0
 800041c:	4780      	blxne	r0
    
    ldr	  r3,=0xe000ed14
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <bloop+0x56>)
    ldr   r2,=((1<<4) | (1<<3))
 8000420:	4a0e      	ldr	r2, [pc, #56]	; (800045c <bloop+0x5a>)
    str   r2,[r3]
 8000422:	601a      	str	r2, [r3, #0]
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <bloop+0x5e>)
    ldr r1,[r3, #RCC_AHB1ENR]
 8000426:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#0b11111			/* enable all clocks */
 8000428:	f04f 021f 	mov.w	r2, #31
    orr r1,r2
 800042c:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, #RCC_AHB1ENR]
 8000430:	6319      	str	r1, [r3, #48]	; 0x30
    
    bl  main
 8000432:	f7ff fed7 	bl	80001e4 <main>
	
    bl  exit
 8000436:	f000 f81b 	bl	8000470 <exit>
	
    bx  lr
 800043a:	4770      	bx	lr
 800043c:	080006b1 	.word	0x080006b1
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 8000440:	080006c8 	.word	0x080006c8
    ldr	r2, =__data_start__	// to start
 8000444:	20000000 	.word	0x20000000
    ldr	r3, =__data_end__	// to end
 8000448:	20000430 	.word	0x20000430
      ldrlt	r0, [r1], #4
      strlt	r0, [r2], #4
      blt	loop_data
      
    movs    r0, #0
    ldr     r1, =__bss_start__
 800044c:	20000430 	.word	0x20000430
    ldr     r2, =__bss_end__
 8000450:	2000044c 	.word	0x2000044c

    ldr	r0, .Lfini
    bl	atexit

    .weak SystemInit
    ldr	r0,=SystemInit
 8000454:	00000000 	.word	0x00000000
    cmp	r0,#0
    it	ne
    blxne	r0
    
    ldr	  r3,=0xe000ed14
 8000458:	e000ed14 	.word	0xe000ed14
    ldr   r2,=((1<<4) | (1<<3))
 800045c:	00000018 	.word	0x00000018
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 8000460:	40023800 	.word	0x40023800

08000464 <atexit>:
 8000464:	4601      	mov	r1, r0
 8000466:	2000      	movs	r0, #0
 8000468:	4602      	mov	r2, r0
 800046a:	4603      	mov	r3, r0
 800046c:	f000 b838 	b.w	80004e0 <__register_exitproc>

08000470 <exit>:
 8000470:	b508      	push	{r3, lr}
 8000472:	2100      	movs	r1, #0
 8000474:	4604      	mov	r4, r0
 8000476:	f000 f88f 	bl	8000598 <__call_exitprocs>
 800047a:	4b04      	ldr	r3, [pc, #16]	; (800048c <exit+0x1c>)
 800047c:	6818      	ldr	r0, [r3, #0]
 800047e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000480:	b103      	cbz	r3, 8000484 <exit+0x14>
 8000482:	4798      	blx	r3
 8000484:	4620      	mov	r0, r4
 8000486:	f000 f907 	bl	8000698 <_exit>
 800048a:	bf00      	nop
 800048c:	080006a0 	.word	0x080006a0

08000490 <__libc_init_array>:
 8000490:	b570      	push	{r4, r5, r6, lr}
 8000492:	4e0f      	ldr	r6, [pc, #60]	; (80004d0 <__libc_init_array+0x40>)
 8000494:	4d0f      	ldr	r5, [pc, #60]	; (80004d4 <__libc_init_array+0x44>)
 8000496:	1b76      	subs	r6, r6, r5
 8000498:	10b6      	asrs	r6, r6, #2
 800049a:	bf18      	it	ne
 800049c:	2400      	movne	r4, #0
 800049e:	d005      	beq.n	80004ac <__libc_init_array+0x1c>
 80004a0:	3401      	adds	r4, #1
 80004a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a6:	4798      	blx	r3
 80004a8:	42a6      	cmp	r6, r4
 80004aa:	d1f9      	bne.n	80004a0 <__libc_init_array+0x10>
 80004ac:	4e0a      	ldr	r6, [pc, #40]	; (80004d8 <__libc_init_array+0x48>)
 80004ae:	4d0b      	ldr	r5, [pc, #44]	; (80004dc <__libc_init_array+0x4c>)
 80004b0:	1b76      	subs	r6, r6, r5
 80004b2:	f000 f8f7 	bl	80006a4 <_init>
 80004b6:	10b6      	asrs	r6, r6, #2
 80004b8:	bf18      	it	ne
 80004ba:	2400      	movne	r4, #0
 80004bc:	d006      	beq.n	80004cc <__libc_init_array+0x3c>
 80004be:	3401      	adds	r4, #1
 80004c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c4:	4798      	blx	r3
 80004c6:	42a6      	cmp	r6, r4
 80004c8:	d1f9      	bne.n	80004be <__libc_init_array+0x2e>
 80004ca:	bd70      	pop	{r4, r5, r6, pc}
 80004cc:	bd70      	pop	{r4, r5, r6, pc}
 80004ce:	bf00      	nop
 80004d0:	080006bc 	.word	0x080006bc
 80004d4:	080006bc 	.word	0x080006bc
 80004d8:	080006c4 	.word	0x080006c4
 80004dc:	080006bc 	.word	0x080006bc

080004e0 <__register_exitproc>:
 80004e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004e4:	4c25      	ldr	r4, [pc, #148]	; (800057c <__register_exitproc+0x9c>)
 80004e6:	6825      	ldr	r5, [r4, #0]
 80004e8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80004ec:	4606      	mov	r6, r0
 80004ee:	4688      	mov	r8, r1
 80004f0:	4692      	mov	sl, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	b3cc      	cbz	r4, 800056a <__register_exitproc+0x8a>
 80004f6:	6860      	ldr	r0, [r4, #4]
 80004f8:	281f      	cmp	r0, #31
 80004fa:	dc18      	bgt.n	800052e <__register_exitproc+0x4e>
 80004fc:	1c43      	adds	r3, r0, #1
 80004fe:	b17e      	cbz	r6, 8000520 <__register_exitproc+0x40>
 8000500:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8000504:	2101      	movs	r1, #1
 8000506:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 800050a:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 800050e:	fa01 f200 	lsl.w	r2, r1, r0
 8000512:	4317      	orrs	r7, r2
 8000514:	2e02      	cmp	r6, #2
 8000516:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800051a:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 800051e:	d01e      	beq.n	800055e <__register_exitproc+0x7e>
 8000520:	3002      	adds	r0, #2
 8000522:	6063      	str	r3, [r4, #4]
 8000524:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8000528:	2000      	movs	r0, #0
 800052a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <__register_exitproc+0xa0>)
 8000530:	b303      	cbz	r3, 8000574 <__register_exitproc+0x94>
 8000532:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000536:	f3af 8000 	nop.w
 800053a:	4604      	mov	r4, r0
 800053c:	b1d0      	cbz	r0, 8000574 <__register_exitproc+0x94>
 800053e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000542:	2700      	movs	r7, #0
 8000544:	e880 0088 	stmia.w	r0, {r3, r7}
 8000548:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800054c:	4638      	mov	r0, r7
 800054e:	2301      	movs	r3, #1
 8000550:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000554:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8000558:	2e00      	cmp	r6, #0
 800055a:	d0e1      	beq.n	8000520 <__register_exitproc+0x40>
 800055c:	e7d0      	b.n	8000500 <__register_exitproc+0x20>
 800055e:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000562:	430a      	orrs	r2, r1
 8000564:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8000568:	e7da      	b.n	8000520 <__register_exitproc+0x40>
 800056a:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800056e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000572:	e7c0      	b.n	80004f6 <__register_exitproc+0x16>
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
 8000578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057c:	080006a0 	.word	0x080006a0
 8000580:	00000000 	.word	0x00000000

08000584 <register_fini>:
 8000584:	4b02      	ldr	r3, [pc, #8]	; (8000590 <register_fini+0xc>)
 8000586:	b113      	cbz	r3, 800058e <register_fini+0xa>
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <register_fini+0x10>)
 800058a:	f7ff bf6b 	b.w	8000464 <atexit>
 800058e:	4770      	bx	lr
 8000590:	00000000 	.word	0x00000000
 8000594:	0800066d 	.word	0x0800066d

08000598 <__call_exitprocs>:
 8000598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800059c:	4b31      	ldr	r3, [pc, #196]	; (8000664 <__call_exitprocs+0xcc>)
 800059e:	b083      	sub	sp, #12
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80005a8:	4681      	mov	r9, r0
 80005aa:	460e      	mov	r6, r1
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	9b00      	ldr	r3, [sp, #0]
 80005b0:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
 80005b4:	b327      	cbz	r7, 8000600 <__call_exitprocs+0x68>
 80005b6:	f8dd a004 	ldr.w	sl, [sp, #4]
 80005ba:	687c      	ldr	r4, [r7, #4]
 80005bc:	1e65      	subs	r5, r4, #1
 80005be:	d40e      	bmi.n	80005de <__call_exitprocs+0x46>
 80005c0:	3401      	adds	r4, #1
 80005c2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80005c6:	f04f 0800 	mov.w	r8, #0
 80005ca:	b1e6      	cbz	r6, 8000606 <__call_exitprocs+0x6e>
 80005cc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80005d0:	42b3      	cmp	r3, r6
 80005d2:	d018      	beq.n	8000606 <__call_exitprocs+0x6e>
 80005d4:	3d01      	subs	r5, #1
 80005d6:	1c6b      	adds	r3, r5, #1
 80005d8:	f1a4 0404 	sub.w	r4, r4, #4
 80005dc:	d1f5      	bne.n	80005ca <__call_exitprocs+0x32>
 80005de:	4b22      	ldr	r3, [pc, #136]	; (8000668 <__call_exitprocs+0xd0>)
 80005e0:	b173      	cbz	r3, 8000600 <__call_exitprocs+0x68>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d136      	bne.n	8000656 <__call_exitprocs+0xbe>
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d034      	beq.n	8000658 <__call_exitprocs+0xc0>
 80005ee:	4638      	mov	r0, r7
 80005f0:	f8ca 3000 	str.w	r3, [sl]
 80005f4:	f3af 8000 	nop.w
 80005f8:	f8da 7000 	ldr.w	r7, [sl]
 80005fc:	2f00      	cmp	r7, #0
 80005fe:	d1dc      	bne.n	80005ba <__call_exitprocs+0x22>
 8000600:	b003      	add	sp, #12
 8000602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6822      	ldr	r2, [r4, #0]
 800060a:	3b01      	subs	r3, #1
 800060c:	42ab      	cmp	r3, r5
 800060e:	bf0c      	ite	eq
 8000610:	607d      	streq	r5, [r7, #4]
 8000612:	f8c4 8000 	strne.w	r8, [r4]
 8000616:	2a00      	cmp	r2, #0
 8000618:	d0dc      	beq.n	80005d4 <__call_exitprocs+0x3c>
 800061a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800061e:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8000622:	2101      	movs	r1, #1
 8000624:	40a9      	lsls	r1, r5
 8000626:	4219      	tst	r1, r3
 8000628:	d108      	bne.n	800063c <__call_exitprocs+0xa4>
 800062a:	4790      	blx	r2
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	455b      	cmp	r3, fp
 8000630:	d1bd      	bne.n	80005ae <__call_exitprocs+0x16>
 8000632:	f8da 3000 	ldr.w	r3, [sl]
 8000636:	42bb      	cmp	r3, r7
 8000638:	d0cc      	beq.n	80005d4 <__call_exitprocs+0x3c>
 800063a:	e7b8      	b.n	80005ae <__call_exitprocs+0x16>
 800063c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000640:	4219      	tst	r1, r3
 8000642:	d104      	bne.n	800064e <__call_exitprocs+0xb6>
 8000644:	4648      	mov	r0, r9
 8000646:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800064a:	4790      	blx	r2
 800064c:	e7ee      	b.n	800062c <__call_exitprocs+0x94>
 800064e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8000652:	4790      	blx	r2
 8000654:	e7ea      	b.n	800062c <__call_exitprocs+0x94>
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	46ba      	mov	sl, r7
 800065a:	461f      	mov	r7, r3
 800065c:	2f00      	cmp	r7, #0
 800065e:	d1ac      	bne.n	80005ba <__call_exitprocs+0x22>
 8000660:	e7ce      	b.n	8000600 <__call_exitprocs+0x68>
 8000662:	bf00      	nop
 8000664:	080006a0 	.word	0x080006a0
 8000668:	00000000 	.word	0x00000000

0800066c <__libc_fini_array>:
 800066c:	b538      	push	{r3, r4, r5, lr}
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <__libc_fini_array+0x24>)
 8000670:	4d08      	ldr	r5, [pc, #32]	; (8000694 <__libc_fini_array+0x28>)
 8000672:	1aed      	subs	r5, r5, r3
 8000674:	10ac      	asrs	r4, r5, #2
 8000676:	bf18      	it	ne
 8000678:	18ed      	addne	r5, r5, r3
 800067a:	d005      	beq.n	8000688 <__libc_fini_array+0x1c>
 800067c:	3c01      	subs	r4, #1
 800067e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8000682:	4798      	blx	r3
 8000684:	2c00      	cmp	r4, #0
 8000686:	d1f9      	bne.n	800067c <__libc_fini_array+0x10>
 8000688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800068c:	f000 b810 	b.w	80006b0 <_fini>
 8000690:	080006c4 	.word	0x080006c4
 8000694:	080006c8 	.word	0x080006c8

08000698 <_exit>:
 8000698:	e7fe      	b.n	8000698 <_exit>
 800069a:	bf00      	nop
 800069c:	00000043 	.word	0x00000043

080006a0 <_global_impure_ptr>:
 80006a0:	20000008                                ... 

080006a4 <_init>:
 80006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a6:	bf00      	nop
 80006a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006aa:	bc08      	pop	{r3}
 80006ac:	469e      	mov	lr, r3
 80006ae:	4770      	bx	lr

080006b0 <_fini>:
 80006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b2:	bf00      	nop
 80006b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006b6:	bc08      	pop	{r3}
 80006b8:	469e      	mov	lr, r3
 80006ba:	4770      	bx	lr
