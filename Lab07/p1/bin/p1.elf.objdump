
bin/p1.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000428 	.word	0x20000428
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000560 	.word	0x08000560

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08000560 	.word	0x08000560
 80001d8:	2000042c 	.word	0x2000042c
 80001dc:	20000428 	.word	0x20000428
 80001e0:	00000000 	.word	0x00000000

080001e4 <main>:

  .text

  FUNCTION main,global

    push {lr}
 80001e4:	b500      	push	{lr}

    bl gpio_c_init
 80001e6:	f000 f80b 	bl	8000200 <gpio_c_init>
    bl gpio_d_init
 80001ea:	f000 f827 	bl	800023c <gpio_d_init>

080001ee <while>:

    while:

	bl gpio_c_get
 80001ee:	f000 f81d 	bl	800022c <gpio_c_get>
	bl gpio_d_put
 80001f2:	f000 f83d 	bl	8000270 <gpio_d_put>

	b while
 80001f6:	e7fa      	b.n	80001ee <while>
    
    pop {lr}
 80001f8:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop

08000200 <gpio_c_init>:

  .text

  FUNCTION gpio_c_init,global

    push {lr}
 8000200:	b500      	push	{lr}

		mov r0,#2										//send 2 as arg to rcc function
 8000202:	f04f 0002 	mov.w	r0, #2
		bl rcc_gpio_enable					//call rcc function
 8000206:	f000 f83b 	bl	8000280 <rcc_gpio_enable>

		ldr r3, =#GPIOC_BASE				//load r3 with the base address of PORT C
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <gpio_c_init+0x20>)

		ldr r2, =#0x00000000				//load 0 into r2
 800020c:	4a05      	ldr	r2, [pc, #20]	; (8000224 <gpio_c_init+0x24>)
		str r2,[r3,#GPIO_PUPDR]			//write Port C PUPDR register as no pull-up, no pull-down
 800020e:	60da      	str	r2, [r3, #12]
		str r2,[r3,#GPIO_MODER]			//write Port C MODER register as input
 8000210:	601a      	str	r2, [r3, #0]
		str r2,[r3,#GPIO_OTYPER]		//write Port C OTYPER register as reset state
 8000212:	605a      	str	r2, [r3, #4]

		ldr r2,=#0xffffffff					//load all ones into r2
 8000214:	4a04      	ldr	r2, [pc, #16]	; (8000228 <gpio_c_init+0x28>)
		str r2,[r3,#GPIO_OSPEEDR]		//set Port C SPEEDR register as high speed
 8000216:	609a      	str	r2, [r3, #8]

		pop {lr}
 8000218:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 800021c:	4770      	bx	lr
 800021e:	0000      	.short	0x0000
    push {lr}

		mov r0,#2										//send 2 as arg to rcc function
		bl rcc_gpio_enable					//call rcc function

		ldr r3, =#GPIOC_BASE				//load r3 with the base address of PORT C
 8000220:	40020800 	.word	0x40020800

		ldr r2, =#0x00000000				//load 0 into r2
 8000224:	00000000 	.word	0x00000000
		str r2,[r3,#GPIO_PUPDR]			//write Port C PUPDR register as no pull-up, no pull-down
		str r2,[r3,#GPIO_MODER]			//write Port C MODER register as input
		str r2,[r3,#GPIO_OTYPER]		//write Port C OTYPER register as reset state

		ldr r2,=#0xffffffff					//load all ones into r2
 8000228:	ffffffff 	.word	0xffffffff

0800022c <gpio_c_get>:
  
  ENDFUNC gpio_c_init

  FUNCTION gpio_c_get,global

		push {lr}
 800022c:	b500      	push	{lr}

		ldr r3,=#GPIOC_BASE			//load r3 with the base address of Port C
 800022e:	4b02      	ldr	r3, [pc, #8]	; (8000238 <gpio_c_get+0xc>)

		ldr r0,[r3,#GPIO_IDR]		//load r0 with the GPIO Port C input data register
 8000230:	6918      	ldr	r0, [r3, #16]

		pop {lr}
 8000232:	f85d eb04 	ldr.w	lr, [sp], #4

		bx lr
 8000236:	4770      	bx	lr

  FUNCTION gpio_c_get,global

		push {lr}

		ldr r3,=#GPIOC_BASE			//load r3 with the base address of Port C
 8000238:	40020800 	.word	0x40020800

0800023c <gpio_d_init>:

  .text

  FUNCTION gpio_d_init,global

    push {lr}
 800023c:	b500      	push	{lr}

		mov r0,#3										//send 3 as arg to rcc function
 800023e:	f04f 0003 	mov.w	r0, #3
		bl rcc_gpio_enable					//call rcc function
 8000242:	f000 f81d 	bl	8000280 <rcc_gpio_enable>

		ldr r3, =#GPIOD_BASE				//load r3 with the base address of PORT D
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <gpio_d_init+0x24>)

		ldr r2, =#0x00000000				//load 0 into r2
 8000248:	4a06      	ldr	r2, [pc, #24]	; (8000264 <gpio_d_init+0x28>)
		str r2,[r3,#GPIO_PUPDR]			//write Port D PUPDR register as no pull-up, no pull-down
 800024a:	60da      	str	r2, [r3, #12]
		str r2,[r3,#GPIO_OTYPER]		//write Port D OTYPER register as reset state
 800024c:	605a      	str	r2, [r3, #4]
		str r2,[r3,#GPIO_ODR]				//write 0 to GPIO Port D output data register
 800024e:	615a      	str	r2, [r3, #20]

		ldr r2,=#0x55555555					//set all 16 bits of Port D to outputs
 8000250:	4a05      	ldr	r2, [pc, #20]	; (8000268 <gpio_d_init+0x2c>)
		str r2,[r3,#GPIO_MODER]
 8000252:	601a      	str	r2, [r3, #0]

		ldr r2,=#0xffffffff					//load all ones into r2
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <gpio_d_init+0x30>)
		str r2,[r3,#GPIO_OSPEEDR]		//set Port D SPEEDR register as high speed
 8000256:	609a      	str	r2, [r3, #8]

		pop {lr}
 8000258:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 800025c:	4770      	bx	lr
 800025e:	0000      	.short	0x0000
    push {lr}

		mov r0,#3										//send 3 as arg to rcc function
		bl rcc_gpio_enable					//call rcc function

		ldr r3, =#GPIOD_BASE				//load r3 with the base address of PORT D
 8000260:	40020c00 	.word	0x40020c00

		ldr r2, =#0x00000000				//load 0 into r2
 8000264:	00000000 	.word	0x00000000
		str r2,[r3,#GPIO_PUPDR]			//write Port D PUPDR register as no pull-up, no pull-down
		str r2,[r3,#GPIO_OTYPER]		//write Port D OTYPER register as reset state
		str r2,[r3,#GPIO_ODR]				//write 0 to GPIO Port D output data register

		ldr r2,=#0x55555555					//set all 16 bits of Port D to outputs
 8000268:	55555555 	.word	0x55555555
		str r2,[r3,#GPIO_MODER]

		ldr r2,=#0xffffffff					//load all ones into r2
 800026c:	ffffffff 	.word	0xffffffff

08000270 <gpio_d_put>:
  
  ENDFUNC gpio_d_init

  FUNCTION gpio_d_put,global

		push {lr}
 8000270:	b500      	push	{lr}

		ldr r3, =#GPIOD_BASE		//load r3 with the base address of Port D
 8000272:	4b02      	ldr	r3, [pc, #8]	; (800027c <gpio_d_put+0xc>)

		str r0,[r3,#GPIO_ODR]		//write r0 to GPIO Port D output
 8000274:	6158      	str	r0, [r3, #20]

		pop {lr}
 8000276:	f85d eb04 	ldr.w	lr, [sp], #4

		bx lr
 800027a:	4770      	bx	lr

  FUNCTION gpio_d_put,global

		push {lr}

		ldr r3, =#GPIOD_BASE		//load r3 with the base address of Port D
 800027c:	40020c00 	.word	0x40020c00

08000280 <rcc_gpio_enable>:
   .thumb_func
   .type       rcc_gpio_enable, %function

rcc_gpio_enable:

  mov r3,#4
 8000280:	f04f 0304 	mov.w	r3, #4
  cmp r0,r3
 8000284:	4298      	cmp	r0, r3
  bgt skip_enable
 8000286:	dc08      	bgt.n	800029a <skip_enable>
    
    ldr r3,=RCC_BASE
 8000288:	4b04      	ldr	r3, [pc, #16]	; (800029c <skip_enable+0x2>)
    ldr r1,[r3, #RCC_AHB1ENR]
 800028a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#1
 800028c:	f04f 0201 	mov.w	r2, #1
    lsl r2,r0
 8000290:	fa02 f200 	lsl.w	r2, r2, r0
    orr r1,r2
 8000294:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, RCC_AHB1ENR]
 8000298:	6319      	str	r1, [r3, #48]	; 0x30

0800029a <skip_enable>:

  skip_enable:

  bx lr
 800029a:	4770      	bx	lr

  mov r3,#4
  cmp r0,r3
  bgt skip_enable
    
    ldr r3,=RCC_BASE
 800029c:	40023800 	.word	0x40023800

080002a0 <ADC_IRQHandler>:
*/

FUNCTION Default_Handler

  Infinite_Loop:
    b  Infinite_Loop
 80002a0:	e7fe      	b.n	80002a0 <ADC_IRQHandler>
 80002a2:	bf00      	nop

080002a4 <Reset_Handler>:
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 80002a4:	4915      	ldr	r1, [pc, #84]	; (80002fc <bloop+0x3e>)
    ldr	r2, =__data_start__	// to start
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <bloop+0x42>)
    ldr	r3, =__data_end__	// to end
 80002a8:	4b16      	ldr	r3, [pc, #88]	; (8000304 <bloop+0x46>)

080002aa <loop_data>:

    loop_data:
      cmp	r2, r3
 80002aa:	429a      	cmp	r2, r3
      ittt	lt
 80002ac:	bfbe      	ittt	lt
      ldrlt	r0, [r1], #4
 80002ae:	f851 0b04 	ldrlt.w	r0, [r1], #4
      strlt	r0, [r2], #4
 80002b2:	f842 0b04 	strlt.w	r0, [r2], #4
      blt	loop_data
 80002b6:	e7f8      	blt.n	80002aa <loop_data>
      
    movs    r0, #0
 80002b8:	2000      	movs	r0, #0
    ldr     r1, =__bss_start__
 80002ba:	4913      	ldr	r1, [pc, #76]	; (8000308 <bloop+0x4a>)
    ldr     r2, =__bss_end__
 80002bc:	4a13      	ldr	r2, [pc, #76]	; (800030c <bloop+0x4e>)

080002be <bloop>:

    bloop:
      cmp     r1, r2
 80002be:	4291      	cmp	r1, r2
      itt     lo
 80002c0:	bf3c      	itt	cc
      strlo   r0, [r1], #4
 80002c2:	f841 0b04 	strcc.w	r0, [r1], #4
      blo     bloop
 80002c6:	e7fa      	bcc.n	80002be <bloop>
    
    bl __libc_init_array
 80002c8:	f000 f840 	bl	800034c <__libc_init_array>

    ldr	r0, .Lfini
 80002cc:	480a      	ldr	r0, [pc, #40]	; (80002f8 <bloop+0x3a>)
    bl	atexit
 80002ce:	f000 f827 	bl	8000320 <atexit>

    .weak SystemInit
    ldr	r0,=SystemInit
 80002d2:	480f      	ldr	r0, [pc, #60]	; (8000310 <bloop+0x52>)
    cmp	r0,#0
 80002d4:	2800      	cmp	r0, #0
    it	ne
 80002d6:	bf18      	it	ne
    blxne	r0
 80002d8:	4780      	blxne	r0
    
    ldr	  r3,=0xe000ed14
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <bloop+0x56>)
    ldr   r2,=((1<<4) | (1<<3))
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <bloop+0x5a>)
    str   r2,[r3]
 80002de:	601a      	str	r2, [r3, #0]
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <bloop+0x5e>)
    ldr r1,[r3, #RCC_AHB1ENR]
 80002e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#0b11111			/* enable all clocks */
 80002e4:	f04f 021f 	mov.w	r2, #31
    orr r1,r2
 80002e8:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, #RCC_AHB1ENR]
 80002ec:	6319      	str	r1, [r3, #48]	; 0x30
    
    bl  main
 80002ee:	f7ff ff79 	bl	80001e4 <main>
	
    bl  exit
 80002f2:	f000 f81b 	bl	800032c <exit>
	
    bx  lr
 80002f6:	4770      	bx	lr
 80002f8:	0800056d 	.word	0x0800056d
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 80002fc:	08000584 	.word	0x08000584
    ldr	r2, =__data_start__	// to start
 8000300:	20000000 	.word	0x20000000
    ldr	r3, =__data_end__	// to end
 8000304:	20000428 	.word	0x20000428
      ldrlt	r0, [r1], #4
      strlt	r0, [r2], #4
      blt	loop_data
      
    movs    r0, #0
    ldr     r1, =__bss_start__
 8000308:	20000428 	.word	0x20000428
    ldr     r2, =__bss_end__
 800030c:	20000444 	.word	0x20000444

    ldr	r0, .Lfini
    bl	atexit

    .weak SystemInit
    ldr	r0,=SystemInit
 8000310:	00000000 	.word	0x00000000
    cmp	r0,#0
    it	ne
    blxne	r0
    
    ldr	  r3,=0xe000ed14
 8000314:	e000ed14 	.word	0xe000ed14
    ldr   r2,=((1<<4) | (1<<3))
 8000318:	00000018 	.word	0x00000018
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 800031c:	40023800 	.word	0x40023800

08000320 <atexit>:
 8000320:	4601      	mov	r1, r0
 8000322:	2000      	movs	r0, #0
 8000324:	4602      	mov	r2, r0
 8000326:	4603      	mov	r3, r0
 8000328:	f000 b838 	b.w	800039c <__register_exitproc>

0800032c <exit>:
 800032c:	b508      	push	{r3, lr}
 800032e:	2100      	movs	r1, #0
 8000330:	4604      	mov	r4, r0
 8000332:	f000 f88f 	bl	8000454 <__call_exitprocs>
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <exit+0x1c>)
 8000338:	6818      	ldr	r0, [r3, #0]
 800033a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800033c:	b103      	cbz	r3, 8000340 <exit+0x14>
 800033e:	4798      	blx	r3
 8000340:	4620      	mov	r0, r4
 8000342:	f000 f907 	bl	8000554 <_exit>
 8000346:	bf00      	nop
 8000348:	0800055c 	.word	0x0800055c

0800034c <__libc_init_array>:
 800034c:	b570      	push	{r4, r5, r6, lr}
 800034e:	4e0f      	ldr	r6, [pc, #60]	; (800038c <__libc_init_array+0x40>)
 8000350:	4d0f      	ldr	r5, [pc, #60]	; (8000390 <__libc_init_array+0x44>)
 8000352:	1b76      	subs	r6, r6, r5
 8000354:	10b6      	asrs	r6, r6, #2
 8000356:	bf18      	it	ne
 8000358:	2400      	movne	r4, #0
 800035a:	d005      	beq.n	8000368 <__libc_init_array+0x1c>
 800035c:	3401      	adds	r4, #1
 800035e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000362:	4798      	blx	r3
 8000364:	42a6      	cmp	r6, r4
 8000366:	d1f9      	bne.n	800035c <__libc_init_array+0x10>
 8000368:	4e0a      	ldr	r6, [pc, #40]	; (8000394 <__libc_init_array+0x48>)
 800036a:	4d0b      	ldr	r5, [pc, #44]	; (8000398 <__libc_init_array+0x4c>)
 800036c:	1b76      	subs	r6, r6, r5
 800036e:	f000 f8f7 	bl	8000560 <_init>
 8000372:	10b6      	asrs	r6, r6, #2
 8000374:	bf18      	it	ne
 8000376:	2400      	movne	r4, #0
 8000378:	d006      	beq.n	8000388 <__libc_init_array+0x3c>
 800037a:	3401      	adds	r4, #1
 800037c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000380:	4798      	blx	r3
 8000382:	42a6      	cmp	r6, r4
 8000384:	d1f9      	bne.n	800037a <__libc_init_array+0x2e>
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	bd70      	pop	{r4, r5, r6, pc}
 800038a:	bf00      	nop
 800038c:	08000578 	.word	0x08000578
 8000390:	08000578 	.word	0x08000578
 8000394:	08000580 	.word	0x08000580
 8000398:	08000578 	.word	0x08000578

0800039c <__register_exitproc>:
 800039c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a0:	4c25      	ldr	r4, [pc, #148]	; (8000438 <__register_exitproc+0x9c>)
 80003a2:	6825      	ldr	r5, [r4, #0]
 80003a4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80003a8:	4606      	mov	r6, r0
 80003aa:	4688      	mov	r8, r1
 80003ac:	4692      	mov	sl, r2
 80003ae:	4699      	mov	r9, r3
 80003b0:	b3cc      	cbz	r4, 8000426 <__register_exitproc+0x8a>
 80003b2:	6860      	ldr	r0, [r4, #4]
 80003b4:	281f      	cmp	r0, #31
 80003b6:	dc18      	bgt.n	80003ea <__register_exitproc+0x4e>
 80003b8:	1c43      	adds	r3, r0, #1
 80003ba:	b17e      	cbz	r6, 80003dc <__register_exitproc+0x40>
 80003bc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80003c0:	2101      	movs	r1, #1
 80003c2:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80003c6:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 80003ca:	fa01 f200 	lsl.w	r2, r1, r0
 80003ce:	4317      	orrs	r7, r2
 80003d0:	2e02      	cmp	r6, #2
 80003d2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 80003d6:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 80003da:	d01e      	beq.n	800041a <__register_exitproc+0x7e>
 80003dc:	3002      	adds	r0, #2
 80003de:	6063      	str	r3, [r4, #4]
 80003e0:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 80003e4:	2000      	movs	r0, #0
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <__register_exitproc+0xa0>)
 80003ec:	b303      	cbz	r3, 8000430 <__register_exitproc+0x94>
 80003ee:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80003f2:	f3af 8000 	nop.w
 80003f6:	4604      	mov	r4, r0
 80003f8:	b1d0      	cbz	r0, 8000430 <__register_exitproc+0x94>
 80003fa:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80003fe:	2700      	movs	r7, #0
 8000400:	e880 0088 	stmia.w	r0, {r3, r7}
 8000404:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000408:	4638      	mov	r0, r7
 800040a:	2301      	movs	r3, #1
 800040c:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000410:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e1      	beq.n	80003dc <__register_exitproc+0x40>
 8000418:	e7d0      	b.n	80003bc <__register_exitproc+0x20>
 800041a:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800041e:	430a      	orrs	r2, r1
 8000420:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8000424:	e7da      	b.n	80003dc <__register_exitproc+0x40>
 8000426:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800042a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800042e:	e7c0      	b.n	80003b2 <__register_exitproc+0x16>
 8000430:	f04f 30ff 	mov.w	r0, #4294967295
 8000434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000438:	0800055c 	.word	0x0800055c
 800043c:	00000000 	.word	0x00000000

08000440 <register_fini>:
 8000440:	4b02      	ldr	r3, [pc, #8]	; (800044c <register_fini+0xc>)
 8000442:	b113      	cbz	r3, 800044a <register_fini+0xa>
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <register_fini+0x10>)
 8000446:	f7ff bf6b 	b.w	8000320 <atexit>
 800044a:	4770      	bx	lr
 800044c:	00000000 	.word	0x00000000
 8000450:	08000529 	.word	0x08000529

08000454 <__call_exitprocs>:
 8000454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000458:	4b31      	ldr	r3, [pc, #196]	; (8000520 <__call_exitprocs+0xcc>)
 800045a:	b083      	sub	sp, #12
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	9300      	str	r3, [sp, #0]
 8000460:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8000464:	4681      	mov	r9, r0
 8000466:	460e      	mov	r6, r1
 8000468:	9301      	str	r3, [sp, #4]
 800046a:	9b00      	ldr	r3, [sp, #0]
 800046c:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
 8000470:	b327      	cbz	r7, 80004bc <__call_exitprocs+0x68>
 8000472:	f8dd a004 	ldr.w	sl, [sp, #4]
 8000476:	687c      	ldr	r4, [r7, #4]
 8000478:	1e65      	subs	r5, r4, #1
 800047a:	d40e      	bmi.n	800049a <__call_exitprocs+0x46>
 800047c:	3401      	adds	r4, #1
 800047e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8000482:	f04f 0800 	mov.w	r8, #0
 8000486:	b1e6      	cbz	r6, 80004c2 <__call_exitprocs+0x6e>
 8000488:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800048c:	42b3      	cmp	r3, r6
 800048e:	d018      	beq.n	80004c2 <__call_exitprocs+0x6e>
 8000490:	3d01      	subs	r5, #1
 8000492:	1c6b      	adds	r3, r5, #1
 8000494:	f1a4 0404 	sub.w	r4, r4, #4
 8000498:	d1f5      	bne.n	8000486 <__call_exitprocs+0x32>
 800049a:	4b22      	ldr	r3, [pc, #136]	; (8000524 <__call_exitprocs+0xd0>)
 800049c:	b173      	cbz	r3, 80004bc <__call_exitprocs+0x68>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d136      	bne.n	8000512 <__call_exitprocs+0xbe>
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d034      	beq.n	8000514 <__call_exitprocs+0xc0>
 80004aa:	4638      	mov	r0, r7
 80004ac:	f8ca 3000 	str.w	r3, [sl]
 80004b0:	f3af 8000 	nop.w
 80004b4:	f8da 7000 	ldr.w	r7, [sl]
 80004b8:	2f00      	cmp	r7, #0
 80004ba:	d1dc      	bne.n	8000476 <__call_exitprocs+0x22>
 80004bc:	b003      	add	sp, #12
 80004be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6822      	ldr	r2, [r4, #0]
 80004c6:	3b01      	subs	r3, #1
 80004c8:	42ab      	cmp	r3, r5
 80004ca:	bf0c      	ite	eq
 80004cc:	607d      	streq	r5, [r7, #4]
 80004ce:	f8c4 8000 	strne.w	r8, [r4]
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d0dc      	beq.n	8000490 <__call_exitprocs+0x3c>
 80004d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80004da:	f8d7 b004 	ldr.w	fp, [r7, #4]
 80004de:	2101      	movs	r1, #1
 80004e0:	40a9      	lsls	r1, r5
 80004e2:	4219      	tst	r1, r3
 80004e4:	d108      	bne.n	80004f8 <__call_exitprocs+0xa4>
 80004e6:	4790      	blx	r2
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	455b      	cmp	r3, fp
 80004ec:	d1bd      	bne.n	800046a <__call_exitprocs+0x16>
 80004ee:	f8da 3000 	ldr.w	r3, [sl]
 80004f2:	42bb      	cmp	r3, r7
 80004f4:	d0cc      	beq.n	8000490 <__call_exitprocs+0x3c>
 80004f6:	e7b8      	b.n	800046a <__call_exitprocs+0x16>
 80004f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80004fc:	4219      	tst	r1, r3
 80004fe:	d104      	bne.n	800050a <__call_exitprocs+0xb6>
 8000500:	4648      	mov	r0, r9
 8000502:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8000506:	4790      	blx	r2
 8000508:	e7ee      	b.n	80004e8 <__call_exitprocs+0x94>
 800050a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800050e:	4790      	blx	r2
 8000510:	e7ea      	b.n	80004e8 <__call_exitprocs+0x94>
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	46ba      	mov	sl, r7
 8000516:	461f      	mov	r7, r3
 8000518:	2f00      	cmp	r7, #0
 800051a:	d1ac      	bne.n	8000476 <__call_exitprocs+0x22>
 800051c:	e7ce      	b.n	80004bc <__call_exitprocs+0x68>
 800051e:	bf00      	nop
 8000520:	0800055c 	.word	0x0800055c
 8000524:	00000000 	.word	0x00000000

08000528 <__libc_fini_array>:
 8000528:	b538      	push	{r3, r4, r5, lr}
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <__libc_fini_array+0x24>)
 800052c:	4d08      	ldr	r5, [pc, #32]	; (8000550 <__libc_fini_array+0x28>)
 800052e:	1aed      	subs	r5, r5, r3
 8000530:	10ac      	asrs	r4, r5, #2
 8000532:	bf18      	it	ne
 8000534:	18ed      	addne	r5, r5, r3
 8000536:	d005      	beq.n	8000544 <__libc_fini_array+0x1c>
 8000538:	3c01      	subs	r4, #1
 800053a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800053e:	4798      	blx	r3
 8000540:	2c00      	cmp	r4, #0
 8000542:	d1f9      	bne.n	8000538 <__libc_fini_array+0x10>
 8000544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000548:	f000 b810 	b.w	800056c <_fini>
 800054c:	08000580 	.word	0x08000580
 8000550:	08000584 	.word	0x08000584

08000554 <_exit>:
 8000554:	e7fe      	b.n	8000554 <_exit>
 8000556:	bf00      	nop
 8000558:	00000043 	.word	0x00000043

0800055c <_global_impure_ptr>:
 800055c:	20000000                                ... 

08000560 <_init>:
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000562:	bf00      	nop
 8000564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000566:	bc08      	pop	{r3}
 8000568:	469e      	mov	lr, r3
 800056a:	4770      	bx	lr

0800056c <_fini>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	bf00      	nop
 8000570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000572:	bc08      	pop	{r3}
 8000574:	469e      	mov	lr, r3
 8000576:	4770      	bx	lr
