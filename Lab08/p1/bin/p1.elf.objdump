
bin/p1.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000438 	.word	0x20000438
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080007a4 	.word	0x080007a4

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	080007a4 	.word	0x080007a4
 80001d8:	2000043c 	.word	0x2000043c
 80001dc:	20000438 	.word	0x20000438
 80001e0:	00000000 	.word	0x00000000

080001e4 <main>:

  .text

  FUNCTION main,global

    push {r4,r5,r6,r7,lr}
 80001e4:	b5f0      	push	{r4, r5, r6, r7, lr}

    ldr r7,=SEG7HEX           //establish addressability to array
 80001e6:	4f0d      	ldr	r7, [pc, #52]	; (800021c <all_done+0x6>)

    bl gpio_c_init            //initialize ports
 80001e8:	f000 f81a 	bl	8000220 <gpio_c_init>
    bl gpio_d_init
 80001ec:	f000 f836 	bl	800025c <gpio_d_init>
    bl seg7_init
 80001f0:	f000 f96e 	bl	80004d0 <seg7_init>

080001f4 <while>:

    while:
      bl sw_get_index         //set LED's with corresponding switches
 80001f4:	f000 f8f4 	bl	80003e0 <sw_get_index>
      bl led_put_index
 80001f8:	f000 f890 	bl	800031c <led_put_index>

      bl sw_get_hex           //retrieve for param2
 80001fc:	f000 f90c 	bl	8000418 <sw_get_hex>
      mov r4,r0               //save param in r4
 8000200:	4604      	mov	r4, r0
      ldrb r5,[r7,r4]         //load into r4 index (r4) at array (r7)
 8000202:	5d3d      	ldrb	r5, [r7, r4]


      bl sw_get_latch         //get lock (1 is locked, 0 is unlocked)
 8000204:	f000 f916 	bl	8000434 <sw_get_latch>
      cbnz r0, display
 8000208:	b920      	cbnz	r0, 8000214 <display>

      bl sw_get_index         //retrieve for param1 & store in r0
 800020a:	f000 f8e9 	bl	80003e0 <sw_get_index>
                                                  //r0                r1
      mov r1,r5               //set param2 as r1 (previously saved in r4)
 800020e:	4629      	mov	r1, r5
      bl seg7_put             //void seg7put(unsigned int segid, unsigned int segments);
 8000210:	f000 f98e 	bl	8000530 <seg7_put>

08000214 <display>:

      display:
      b while
 8000214:	e7ee      	b.n	80001f4 <while>

08000216 <all_done>:

    all_done:
    
    pop {r4,r5,r6,r7,lr}
 8000216:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    bx lr
 800021a:	4770      	bx	lr

  FUNCTION main,global

    push {r4,r5,r6,r7,lr}

    ldr r7,=SEG7HEX           //establish addressability to array
 800021c:	20000000 	.word	0x20000000

08000220 <gpio_c_init>:

  .text

  FUNCTION gpio_c_init,global

    push {lr}
 8000220:	b500      	push	{lr}

		mov r0,#2						//send 2 as arg to rcc function
 8000222:	f04f 0002 	mov.w	r0, #2
		bl rcc_gpio_enable				//call rcc function
 8000226:	f000 f8a9 	bl	800037c <rcc_gpio_enable>

		ldr r3, =#GPIOC_BASE			//load r3 with the base address of PORT C
 800022a:	4b05      	ldr	r3, [pc, #20]	; (8000240 <gpio_c_init+0x20>)

		ldr r2, =#0x00000000			//load 0 into r2
 800022c:	4a05      	ldr	r2, [pc, #20]	; (8000244 <gpio_c_init+0x24>)
		str r2,[r3,#GPIO_PUPDR]			//write Port C PUPDR register as no pull-up, no pull-down
 800022e:	60da      	str	r2, [r3, #12]
		str r2,[r3,#GPIO_MODER]			//write Port C MODER register as input
 8000230:	601a      	str	r2, [r3, #0]
		str r2,[r3,#GPIO_OTYPER]		//write Port C OTYPER register as reset state
 8000232:	605a      	str	r2, [r3, #4]

		ldr r2,=#0xffffffff				//load all ones into r2
 8000234:	4a04      	ldr	r2, [pc, #16]	; (8000248 <gpio_c_init+0x28>)
		str r2,[r3,#GPIO_OSPEEDR]		//set Port C SPEEDR register as high speed
 8000236:	609a      	str	r2, [r3, #8]

		pop {lr}
 8000238:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 800023c:	4770      	bx	lr
 800023e:	0000      	.short	0x0000
    push {lr}

		mov r0,#2						//send 2 as arg to rcc function
		bl rcc_gpio_enable				//call rcc function

		ldr r3, =#GPIOC_BASE			//load r3 with the base address of PORT C
 8000240:	40020800 	.word	0x40020800

		ldr r2, =#0x00000000			//load 0 into r2
 8000244:	00000000 	.word	0x00000000
		str r2,[r3,#GPIO_PUPDR]			//write Port C PUPDR register as no pull-up, no pull-down
		str r2,[r3,#GPIO_MODER]			//write Port C MODER register as input
		str r2,[r3,#GPIO_OTYPER]		//write Port C OTYPER register as reset state

		ldr r2,=#0xffffffff				//load all ones into r2
 8000248:	ffffffff 	.word	0xffffffff

0800024c <gpio_c_get>:
  
  ENDFUNC gpio_c_init

  FUNCTION gpio_c_get,global

		push {lr}
 800024c:	b500      	push	{lr}

		ldr r3,=#GPIOC_BASE			//load r3 with the base address of Port C
 800024e:	4b02      	ldr	r3, [pc, #8]	; (8000258 <gpio_c_get+0xc>)

		ldr r0,[r3,#GPIO_IDR]		//load r0 with the GPIO Port C input data register
 8000250:	6918      	ldr	r0, [r3, #16]

		pop {lr}
 8000252:	f85d eb04 	ldr.w	lr, [sp], #4

		bx lr
 8000256:	4770      	bx	lr

  FUNCTION gpio_c_get,global

		push {lr}

		ldr r3,=#GPIOC_BASE			//load r3 with the base address of Port C
 8000258:	40020800 	.word	0x40020800

0800025c <gpio_d_init>:

  .text

  FUNCTION gpio_d_init,global

    push {lr}
 800025c:	b500      	push	{lr}

		mov r0,#3						//send 3 as arg to rcc function
 800025e:	f04f 0003 	mov.w	r0, #3
		bl rcc_gpio_enable				//call rcc function
 8000262:	f000 f88b 	bl	800037c <rcc_gpio_enable>

		ldr r3, =#GPIOD_BASE			//load r3 with the base address of PORT D
 8000266:	4b06      	ldr	r3, [pc, #24]	; (8000280 <gpio_d_init+0x24>)

		ldr r2, =#0x00000000			//load 0 into r2
 8000268:	4a06      	ldr	r2, [pc, #24]	; (8000284 <gpio_d_init+0x28>)
		str r2,[r3,#GPIO_PUPDR]			//write Port D PUPDR register as no pull-up, no pull-down
 800026a:	60da      	str	r2, [r3, #12]
		str r2,[r3,#GPIO_OTYPER]		//write Port D OTYPER register as reset state
 800026c:	605a      	str	r2, [r3, #4]
		str r2,[r3,#GPIO_ODR]			//write 0 to GPIO Port D output data register
 800026e:	615a      	str	r2, [r3, #20]

		ldr r2,=#0x55555555				//set all 16 bits of Port D to outputs
 8000270:	4a05      	ldr	r2, [pc, #20]	; (8000288 <gpio_d_init+0x2c>)
		str r2,[r3,#GPIO_MODER]
 8000272:	601a      	str	r2, [r3, #0]

		ldr r2,=#0xffffffff				//load all ones into r2
 8000274:	4a05      	ldr	r2, [pc, #20]	; (800028c <gpio_d_init+0x30>)
		str r2,[r3,#GPIO_OSPEEDR]		//set Port D SPEEDR register as high speed
 8000276:	609a      	str	r2, [r3, #8]

		pop {lr}
 8000278:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 800027c:	4770      	bx	lr
 800027e:	0000      	.short	0x0000
    push {lr}

		mov r0,#3						//send 3 as arg to rcc function
		bl rcc_gpio_enable				//call rcc function

		ldr r3, =#GPIOD_BASE			//load r3 with the base address of PORT D
 8000280:	40020c00 	.word	0x40020c00

		ldr r2, =#0x00000000			//load 0 into r2
 8000284:	00000000 	.word	0x00000000
		str r2,[r3,#GPIO_PUPDR]			//write Port D PUPDR register as no pull-up, no pull-down
		str r2,[r3,#GPIO_OTYPER]		//write Port D OTYPER register as reset state
		str r2,[r3,#GPIO_ODR]			//write 0 to GPIO Port D output data register

		ldr r2,=#0x55555555				//set all 16 bits of Port D to outputs
 8000288:	55555555 	.word	0x55555555
		str r2,[r3,#GPIO_MODER]

		ldr r2,=#0xffffffff				//load all ones into r2
 800028c:	ffffffff 	.word	0xffffffff

08000290 <gpio_d_put>:
  
  ENDFUNC gpio_d_init

  FUNCTION gpio_d_put,global

		push {lr}
 8000290:	b500      	push	{lr}

		ldr r3, =#GPIOD_BASE		//load r3 with the base address of Port D
 8000292:	4b02      	ldr	r3, [pc, #8]	; (800029c <gpio_d_put+0xc>)

		str r0,[r3,#GPIO_ODR]		//write r0 to GPIO Port D output
 8000294:	6158      	str	r0, [r3, #20]

		pop {lr}
 8000296:	f85d eb04 	ldr.w	lr, [sp], #4

		bx lr
 800029a:	4770      	bx	lr

  FUNCTION gpio_d_put,global

		push {lr}

		ldr r3, =#GPIOD_BASE		//load r3 with the base address of Port D
 800029c:	40020c00 	.word	0x40020c00

080002a0 <gpio_d_get_current>:

  ENDFUNC gpio_d_put

  FUNCTION gpio_d_get_current,global

        push {lr}
 80002a0:	b500      	push	{lr}

        ldr r3,=#GPIOD_BASE         //load r3 with base register address of port D
 80002a2:	4b02      	ldr	r3, [pc, #8]	; (80002ac <gpio_d_get_current+0xc>)
        ldr r0,[r3,#GPIO_ODR]       //load r0 (return arg) with GPIO D output data register
 80002a4:	6958      	ldr	r0, [r3, #20]

        pop {lr}
 80002a6:	f85d eb04 	ldr.w	lr, [sp], #4

        bx lr
 80002aa:	4770      	bx	lr

  FUNCTION gpio_d_get_current,global

        push {lr}

        ldr r3,=#GPIOD_BASE         //load r3 with base register address of port D
 80002ac:	40020c00 	.word	0x40020c00

080002b0 <LEDR_Init>:

  .text

  FUNCTION LEDR_Init,global

    push {lr}
 80002b0:	b500      	push	{lr}

    bl gpio_d_init          //initialize GPIO port D as output
 80002b2:	f7ff ffd3 	bl	800025c <gpio_d_init>

    pop {lr}
 80002b6:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 80002ba:	4770      	bx	lr

080002bc <LEDR_Put_A>:

  ENDFUNC LEDR_Init
  
  FUNCTION LEDR_Put_A,global

    push {lr}
 80002bc:	b500      	push	{lr}

    mov r1,r0               //save the value of passed inputs
 80002be:	4601      	mov	r1, r0

    bl gpio_d_get_current   //get target value
 80002c0:	f7ff ffee 	bl	80002a0 <gpio_d_get_current>
    
    mov r2,#0b1             //create 1 bit mask
 80002c4:	f04f 0201 	mov.w	r2, #1
    and r1,r2               //isolate new bit 8
 80002c8:	ea01 0102 	and.w	r1, r1, r2
    lsl r1,#8               //denormalize the new bit 8
 80002cc:	ea4f 2101 	mov.w	r1, r1, lsl #8
    lsl r2,#8               //denormalize mask bit 8
 80002d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    mvn r2,r2               //invert mask
 80002d4:	ea6f 0202 	mvn.w	r2, r2
    and r0,r2               //clear target bit 8
 80002d8:	ea00 0002 	and.w	r0, r0, r2
    orr r0,r1               //merge new bit 8 into target
 80002dc:	ea40 0001 	orr.w	r0, r0, r1
    
    bl gpio_d_put           //write target register to port D
 80002e0:	f7ff ffd6 	bl	8000290 <gpio_d_put>

    pop {lr}
 80002e4:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop

080002ec <LEDR_Put_B>:

  ENDFUNC LEDR_Put_A

  FUNCTION LEDR_Put_B,global

    push {lr}
 80002ec:	b500      	push	{lr}

    mov r1,r0               //save the value of passed inputs
 80002ee:	4601      	mov	r1, r0

    bl gpio_d_get_current   //get target value
 80002f0:	f7ff ffd6 	bl	80002a0 <gpio_d_get_current>

    ldr r2,=(~(~0<<4))       //create 4 bit mask
 80002f4:	4a08      	ldr	r2, [pc, #32]	; (8000318 <LEDR_Put_B+0x2c>)
    and r1,r2               //isolate bits [5:2]
 80002f6:	ea01 0102 	and.w	r1, r1, r2
    lsl r1,#2               //denormalize the new bits
 80002fa:	ea4f 0181 	mov.w	r1, r1, lsl #2
    lsl r2,#2               //denormalize mask bits
 80002fe:	ea4f 0282 	mov.w	r2, r2, lsl #2
    mvn r2,r2               //invert mask
 8000302:	ea6f 0202 	mvn.w	r2, r2
    and r0,r2               //clear target bit 2
 8000306:	ea00 0002 	and.w	r0, r0, r2
    orr r0,r1               //merge new bits into target
 800030a:	ea40 0001 	orr.w	r0, r0, r1

    bl gpio_d_put
 800030e:	f7ff ffbf 	bl	8000290 <gpio_d_put>

    pop {lr}
 8000312:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 8000316:	4770      	bx	lr

    mov r1,r0               //save the value of passed inputs

    bl gpio_d_get_current   //get target value

    ldr r2,=(~(~0<<4))       //create 4 bit mask
 8000318:	0000000f 	.word	0x0000000f

0800031c <led_put_index>:

  ENDFUNC LEDR_Put_B

  FUNCTION led_put_index,global

    push {lr}
 800031c:	b500      	push	{lr}

    mov r1,r0               //save the value of passed inputs
 800031e:	4601      	mov	r1, r0

    bl gpio_d_get_current   //get target value
 8000320:	f7ff ffbe 	bl	80002a0 <gpio_d_get_current>

    ldr r2,=(~(~0<<3))       //create 4 bit mask
 8000324:	4a08      	ldr	r2, [pc, #32]	; (8000348 <led_put_index+0x2c>)
    and r1,r2               //isolate bits [5:2]
 8000326:	ea01 0102 	and.w	r1, r1, r2
    lsl r1,#12               //denormalize the new bits
 800032a:	ea4f 3101 	mov.w	r1, r1, lsl #12
    lsl r2,#12               //denormalize mask bits
 800032e:	ea4f 3202 	mov.w	r2, r2, lsl #12
    mvn r2,r2               //invert mask
 8000332:	ea6f 0202 	mvn.w	r2, r2
    and r0,r2               //clear target bit 2
 8000336:	ea00 0002 	and.w	r0, r0, r2
    orr r0,r1               //merge new bits into target
 800033a:	ea40 0001 	orr.w	r0, r0, r1

    bl gpio_d_put
 800033e:	f7ff ffa7 	bl	8000290 <gpio_d_put>

    pop {lr}
 8000342:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 8000346:	4770      	bx	lr

    mov r1,r0               //save the value of passed inputs

    bl gpio_d_get_current   //get target value

    ldr r2,=(~(~0<<3))       //create 4 bit mask
 8000348:	00000007 	.word	0x00000007

0800034c <led_put_segments>:

  ENDFUNC led_put_index

  FUNCTION led_put_segments,global

    push {lr}
 800034c:	b500      	push	{lr}

    mov r1,r0               //save the value of passed inputs
 800034e:	4601      	mov	r1, r0

    bl gpio_d_get_current   //get target value
 8000350:	f7ff ffa6 	bl	80002a0 <gpio_d_get_current>

    ldr r2,=(~(~0<<7))       //create 7 bit mask
 8000354:	4a08      	ldr	r2, [pc, #32]	; (8000378 <led_put_segments+0x2c>)
    and r1,r2               //isolate bits [6:0]
 8000356:	ea01 0102 	and.w	r1, r1, r2
    lsl r1,#0               //denormalize the new bits
 800035a:	ea4f 0101 	mov.w	r1, r1
    lsl r2,#0               //denormalize mask bits
 800035e:	ea4f 0202 	mov.w	r2, r2
    mvn r2,r2               //invert mask
 8000362:	ea6f 0202 	mvn.w	r2, r2
    and r0,r2               //clear target bit 2
 8000366:	ea00 0002 	and.w	r0, r0, r2
    orr r0,r1               //merge new bits into target
 800036a:	ea40 0001 	orr.w	r0, r0, r1

    bl gpio_d_put
 800036e:	f7ff ff8f 	bl	8000290 <gpio_d_put>

    pop {lr}
 8000372:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 8000376:	4770      	bx	lr

    mov r1,r0               //save the value of passed inputs

    bl gpio_d_get_current   //get target value

    ldr r2,=(~(~0<<7))       //create 7 bit mask
 8000378:	0000007f 	.word	0x0000007f

0800037c <rcc_gpio_enable>:
   .thumb_func
   .type       rcc_gpio_enable, %function

rcc_gpio_enable:

  mov r3,#4
 800037c:	f04f 0304 	mov.w	r3, #4
  cmp r0,r3
 8000380:	4298      	cmp	r0, r3
  bgt skip_enable
 8000382:	dc08      	bgt.n	8000396 <skip_enable>
    
    ldr r3,=RCC_BASE
 8000384:	4b04      	ldr	r3, [pc, #16]	; (8000398 <skip_enable+0x2>)
    ldr r1,[r3, #RCC_AHB1ENR]
 8000386:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#1
 8000388:	f04f 0201 	mov.w	r2, #1
    lsl r2,r0
 800038c:	fa02 f200 	lsl.w	r2, r2, r0
    orr r1,r2
 8000390:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, RCC_AHB1ENR]
 8000394:	6319      	str	r1, [r3, #48]	; 0x30

08000396 <skip_enable>:

  skip_enable:

  bx lr
 8000396:	4770      	bx	lr

  mov r3,#4
  cmp r0,r3
  bgt skip_enable
    
    ldr r3,=RCC_BASE
 8000398:	40023800 	.word	0x40023800

0800039c <SW_Init>:

  .text

  FUNCTION SW_Init,global

    push {lr}
 800039c:	b500      	push	{lr}

    bl gpio_c_init              //initialize GPIO port A as input
 800039e:	f7ff ff3f 	bl	8000220 <gpio_c_init>

    pop {lr}
 80003a2:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 80003a6:	4770      	bx	lr

080003a8 <SW_Get_A>:
  
  ENDFUNC SW_Init

  FUNCTION SW_Get_A,global

    push {lr}
 80003a8:	b500      	push	{lr}

    bl gpio_c_get               //get all 32 bits of port A
 80003aa:	f7ff ff4f 	bl	800024c <gpio_c_get>

    lsr r0,#3                   //normalize bit 3
 80003ae:	ea4f 00d0 	mov.w	r0, r0, lsr #3

    ldr r1,=#0x1             //create mask for bit 3
 80003b2:	4903      	ldr	r1, [pc, #12]	; (80003c0 <SW_Get_A+0x18>)

    and r0,r1                   //apply mask
 80003b4:	ea00 0001 	and.w	r0, r0, r1

    pop {lr}
 80003b8:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 80003bc:	4770      	bx	lr
 80003be:	0000      	.short	0x0000

    bl gpio_c_get               //get all 32 bits of port A

    lsr r0,#3                   //normalize bit 3

    ldr r1,=#0x1             //create mask for bit 3
 80003c0:	00000001 	.word	0x00000001

080003c4 <SW_Get_B>:

  ENDFUNC SW_Get_A

  FUNCTION SW_Get_B,global

    push {lr}
 80003c4:	b500      	push	{lr}

    bl gpio_c_get           //get all 32 bits of input
 80003c6:	f7ff ff41 	bl	800024c <gpio_c_get>
    lsr r0,#8
 80003ca:	ea4f 2010 	mov.w	r0, r0, lsr #8
    ldr r1,=#(~(~0<<4))     //create mask for bits
 80003ce:	4903      	ldr	r1, [pc, #12]	; (80003dc <SW_Get_B+0x18>)
    and r0,r1               //islolate bits [11:8]
 80003d0:	ea00 0001 	and.w	r0, r0, r1

    pop {lr}
 80003d4:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 80003d8:	4770      	bx	lr
 80003da:	0000      	.short	0x0000

    push {lr}

    bl gpio_c_get           //get all 32 bits of input
    lsr r0,#8
    ldr r1,=#(~(~0<<4))     //create mask for bits
 80003dc:	0000000f 	.word	0x0000000f

080003e0 <sw_get_index>:

  ENDFUNC SW_Get_B

  FUNCTION sw_get_index,global

    push {lr}
 80003e0:	b500      	push	{lr}

    bl gpio_c_get           //get all 32 bits of input
 80003e2:	f7ff ff33 	bl	800024c <gpio_c_get>
    lsr r0,#12              //Normalize Bits
 80003e6:	ea4f 3010 	mov.w	r0, r0, lsr #12
    ldr r1,=#(~(~0<<3))     //create mask for bits
 80003ea:	4903      	ldr	r1, [pc, #12]	; (80003f8 <sw_get_index+0x18>)
    and r0,r1               //islolate bits [14:12]
 80003ec:	ea00 0001 	and.w	r0, r0, r1

    pop {lr}
 80003f0:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 80003f4:	4770      	bx	lr
 80003f6:	0000      	.short	0x0000

    push {lr}

    bl gpio_c_get           //get all 32 bits of input
    lsr r0,#12              //Normalize Bits
    ldr r1,=#(~(~0<<3))     //create mask for bits
 80003f8:	00000007 	.word	0x00000007

080003fc <sw_get_segments>:

  ENDFUNC sw_get_index

  FUNCTION sw_get_segments,global

    push {lr}
 80003fc:	b500      	push	{lr}

    bl gpio_c_get           //get all 32 bits of input
 80003fe:	f7ff ff25 	bl	800024c <gpio_c_get>
    lsr r0,#0               //No need to normalize
 8000402:	ea4f 0000 	mov.w	r0, r0
    ldr r1,=#(~(~0<<7))     //create mask for bits
 8000406:	4903      	ldr	r1, [pc, #12]	; (8000414 <sw_get_segments+0x18>)
    and r0,r1               //islolate bits [6:0]
 8000408:	ea00 0001 	and.w	r0, r0, r1

    pop {lr}
 800040c:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 8000410:	4770      	bx	lr
 8000412:	0000      	.short	0x0000

    push {lr}

    bl gpio_c_get           //get all 32 bits of input
    lsr r0,#0               //No need to normalize
    ldr r1,=#(~(~0<<7))     //create mask for bits
 8000414:	0000007f 	.word	0x0000007f

08000418 <sw_get_hex>:

  ENDFUNC sw_get_segments

  FUNCTION sw_get_hex,global

    push {lr}
 8000418:	b500      	push	{lr}

    bl gpio_c_get           //get all 32 bits of input
 800041a:	f7ff ff17 	bl	800024c <gpio_c_get>
    lsr r0,#7               //Normalize
 800041e:	ea4f 10d0 	mov.w	r0, r0, lsr #7
    ldr r1,=#(~(~0<<4))     //create mask for bits
 8000422:	4903      	ldr	r1, [pc, #12]	; (8000430 <sw_get_hex+0x18>)
    and r0,r1               //islolate bits [10:7]
 8000424:	ea00 0001 	and.w	r0, r0, r1

    pop {lr}
 8000428:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 800042c:	4770      	bx	lr
 800042e:	0000      	.short	0x0000

    push {lr}

    bl gpio_c_get           //get all 32 bits of input
    lsr r0,#7               //Normalize
    ldr r1,=#(~(~0<<4))     //create mask for bits
 8000430:	0000000f 	.word	0x0000000f

08000434 <sw_get_latch>:

  ENDFUNC sw_get_hex

  FUNCTION sw_get_latch,global

    push {lr}
 8000434:	b500      	push	{lr}

    bl gpio_c_get           //get all 32 bits of input
 8000436:	f7ff ff09 	bl	800024c <gpio_c_get>
    lsr r0,#15              //Normalize
 800043a:	ea4f 30d0 	mov.w	r0, r0, lsr #15
    ldr r1,=#(~(~0<<1))     //create mask for bits
 800043e:	4903      	ldr	r1, [pc, #12]	; (800044c <sw_get_latch+0x18>)
    and r0,r1               //islolate bit [15]
 8000440:	ea00 0001 	and.w	r0, r0, r1

    pop {lr}
 8000444:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 8000448:	4770      	bx	lr
 800044a:	0000      	.short	0x0000

    push {lr}

    bl gpio_c_get           //get all 32 bits of input
    lsr r0,#15              //Normalize
    ldr r1,=#(~(~0<<1))     //create mask for bits
 800044c:	00000001 	.word	0x00000001

08000450 <ADC_IRQHandler>:
*/

FUNCTION Default_Handler

  Infinite_Loop:
    b  Infinite_Loop
 8000450:	e7fe      	b.n	8000450 <ADC_IRQHandler>
 8000452:	bf00      	nop

08000454 <Reset_Handler>:
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 8000454:	4915      	ldr	r1, [pc, #84]	; (80004ac <bloop+0x3e>)
    ldr	r2, =__data_start__	// to start
 8000456:	4a16      	ldr	r2, [pc, #88]	; (80004b0 <bloop+0x42>)
    ldr	r3, =__data_end__	// to end
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <bloop+0x46>)

0800045a <loop_data>:

    loop_data:
      cmp	r2, r3
 800045a:	429a      	cmp	r2, r3
      ittt	lt
 800045c:	bfbe      	ittt	lt
      ldrlt	r0, [r1], #4
 800045e:	f851 0b04 	ldrlt.w	r0, [r1], #4
      strlt	r0, [r2], #4
 8000462:	f842 0b04 	strlt.w	r0, [r2], #4
      blt	loop_data
 8000466:	e7f8      	blt.n	800045a <loop_data>
      
    movs    r0, #0
 8000468:	2000      	movs	r0, #0
    ldr     r1, =__bss_start__
 800046a:	4913      	ldr	r1, [pc, #76]	; (80004b8 <bloop+0x4a>)
    ldr     r2, =__bss_end__
 800046c:	4a13      	ldr	r2, [pc, #76]	; (80004bc <bloop+0x4e>)

0800046e <bloop>:

    bloop:
      cmp     r1, r2
 800046e:	4291      	cmp	r1, r2
      itt     lo
 8000470:	bf3c      	itt	cc
      strlo   r0, [r1], #4
 8000472:	f841 0b04 	strcc.w	r0, [r1], #4
      blo     bloop
 8000476:	e7fa      	bcc.n	800046e <bloop>
    
    bl __libc_init_array
 8000478:	f000 f88a 	bl	8000590 <__libc_init_array>

    ldr	r0, .Lfini
 800047c:	480a      	ldr	r0, [pc, #40]	; (80004a8 <bloop+0x3a>)
    bl	atexit
 800047e:	f000 f871 	bl	8000564 <atexit>

    .weak SystemInit
    ldr	r0,=SystemInit
 8000482:	480f      	ldr	r0, [pc, #60]	; (80004c0 <bloop+0x52>)
    cmp	r0,#0
 8000484:	2800      	cmp	r0, #0
    it	ne
 8000486:	bf18      	it	ne
    blxne	r0
 8000488:	4780      	blxne	r0
    
    ldr	  r3,=0xe000ed14
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <bloop+0x56>)
    ldr   r2,=((1<<4) | (1<<3))
 800048c:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <bloop+0x5a>)
    str   r2,[r3]
 800048e:	601a      	str	r2, [r3, #0]
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 8000490:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <bloop+0x5e>)
    ldr r1,[r3, #RCC_AHB1ENR]
 8000492:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#0b11111			/* enable all clocks */
 8000494:	f04f 021f 	mov.w	r2, #31
    orr r1,r2
 8000498:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, #RCC_AHB1ENR]
 800049c:	6319      	str	r1, [r3, #48]	; 0x30
    
    bl  main
 800049e:	f7ff fea1 	bl	80001e4 <main>
	
    bl  exit
 80004a2:	f000 f865 	bl	8000570 <exit>
	
    bx  lr
 80004a6:	4770      	bx	lr
 80004a8:	080007b1 	.word	0x080007b1
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 80004ac:	080007c8 	.word	0x080007c8
    ldr	r2, =__data_start__	// to start
 80004b0:	20000000 	.word	0x20000000
    ldr	r3, =__data_end__	// to end
 80004b4:	20000438 	.word	0x20000438
      ldrlt	r0, [r1], #4
      strlt	r0, [r2], #4
      blt	loop_data
      
    movs    r0, #0
    ldr     r1, =__bss_start__
 80004b8:	20000438 	.word	0x20000438
    ldr     r2, =__bss_end__
 80004bc:	20000454 	.word	0x20000454

    ldr	r0, .Lfini
    bl	atexit

    .weak SystemInit
    ldr	r0,=SystemInit
 80004c0:	00000000 	.word	0x00000000
    cmp	r0,#0
    it	ne
    blxne	r0
    
    ldr	  r3,=0xe000ed14
 80004c4:	e000ed14 	.word	0xe000ed14
    ldr   r2,=((1<<4) | (1<<3))
 80004c8:	00000018 	.word	0x00000018
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 80004cc:	40023800 	.word	0x40023800

080004d0 <seg7_init>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <seg7_init_loop_end+0x6>)
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	4911      	ldr	r1, [pc, #68]	; (800051c <seg7_init_loop_end+0xa>)
 80004d8:	f361 0213 	bfi	r2, r1, #0, #20
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	695a      	ldr	r2, [r3, #20]
 80004e0:	490f      	ldr	r1, [pc, #60]	; (8000520 <seg7_init_loop_end+0xe>)
 80004e2:	f361 0209 	bfi	r2, r1, #0, #10
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <seg7_init_loop_end+0x12>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	490e      	ldr	r1, [pc, #56]	; (8000528 <seg7_init_loop_end+0x16>)
 80004ee:	f361 0201 	bfi	r2, r1, #0, #2
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	f04f 0400 	mov.w	r4, #0
 80004f8:	f04f 0508 	mov.w	r5, #8
 80004fc:	4e0b      	ldr	r6, [pc, #44]	; (800052c <seg7_init_loop_end+0x1a>)

080004fe <seg7_init_loop>:
 80004fe:	b145      	cbz	r5, 8000512 <seg7_init_loop_end>
 8000500:	4620      	mov	r0, r4
 8000502:	4631      	mov	r1, r6
 8000504:	f000 f814 	bl	8000530 <seg7_put>
 8000508:	f104 0401 	add.w	r4, r4, #1
 800050c:	f1a5 0501 	sub.w	r5, r5, #1
 8000510:	e7f5      	b.n	80004fe <seg7_init_loop>

08000512 <seg7_init_loop_end>:
 8000512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000
 800051c:	00055555 	.word	0x00055555
 8000520:	000003ff 	.word	0x000003ff
 8000524:	40020400 	.word	0x40020400
 8000528:	00000001 	.word	0x00000001
 800052c:	0000007f 	.word	0x0000007f

08000530 <seg7_put>:
 8000530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000532:	4f0a      	ldr	r7, [pc, #40]	; (800055c <seg7_put+0x2c>)
 8000534:	697c      	ldr	r4, [r7, #20]
 8000536:	f360 0402 	bfi	r4, r0, #0, #3
 800053a:	f361 04c9 	bfi	r4, r1, #3, #7
 800053e:	617c      	str	r4, [r7, #20]
 8000540:	4f07      	ldr	r7, [pc, #28]	; (8000560 <seg7_put+0x30>)
 8000542:	f04f 0401 	mov.w	r4, #1
 8000546:	61bc      	str	r4, [r7, #24]
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	ea4f 4404 	mov.w	r4, r4, lsl #16
 8000554:	61bc      	str	r4, [r7, #24]
 8000556:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000
 8000560:	40020400 	.word	0x40020400

08000564 <atexit>:
 8000564:	4601      	mov	r1, r0
 8000566:	2000      	movs	r0, #0
 8000568:	4602      	mov	r2, r0
 800056a:	4603      	mov	r3, r0
 800056c:	f000 b838 	b.w	80005e0 <__register_exitproc>

08000570 <exit>:
 8000570:	b508      	push	{r3, lr}
 8000572:	2100      	movs	r1, #0
 8000574:	4604      	mov	r4, r0
 8000576:	f000 f88f 	bl	8000698 <__call_exitprocs>
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <exit+0x1c>)
 800057c:	6818      	ldr	r0, [r3, #0]
 800057e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000580:	b103      	cbz	r3, 8000584 <exit+0x14>
 8000582:	4798      	blx	r3
 8000584:	4620      	mov	r0, r4
 8000586:	f000 f907 	bl	8000798 <_exit>
 800058a:	bf00      	nop
 800058c:	080007a0 	.word	0x080007a0

08000590 <__libc_init_array>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	4e0f      	ldr	r6, [pc, #60]	; (80005d0 <__libc_init_array+0x40>)
 8000594:	4d0f      	ldr	r5, [pc, #60]	; (80005d4 <__libc_init_array+0x44>)
 8000596:	1b76      	subs	r6, r6, r5
 8000598:	10b6      	asrs	r6, r6, #2
 800059a:	bf18      	it	ne
 800059c:	2400      	movne	r4, #0
 800059e:	d005      	beq.n	80005ac <__libc_init_array+0x1c>
 80005a0:	3401      	adds	r4, #1
 80005a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a6:	4798      	blx	r3
 80005a8:	42a6      	cmp	r6, r4
 80005aa:	d1f9      	bne.n	80005a0 <__libc_init_array+0x10>
 80005ac:	4e0a      	ldr	r6, [pc, #40]	; (80005d8 <__libc_init_array+0x48>)
 80005ae:	4d0b      	ldr	r5, [pc, #44]	; (80005dc <__libc_init_array+0x4c>)
 80005b0:	1b76      	subs	r6, r6, r5
 80005b2:	f000 f8f7 	bl	80007a4 <_init>
 80005b6:	10b6      	asrs	r6, r6, #2
 80005b8:	bf18      	it	ne
 80005ba:	2400      	movne	r4, #0
 80005bc:	d006      	beq.n	80005cc <__libc_init_array+0x3c>
 80005be:	3401      	adds	r4, #1
 80005c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c4:	4798      	blx	r3
 80005c6:	42a6      	cmp	r6, r4
 80005c8:	d1f9      	bne.n	80005be <__libc_init_array+0x2e>
 80005ca:	bd70      	pop	{r4, r5, r6, pc}
 80005cc:	bd70      	pop	{r4, r5, r6, pc}
 80005ce:	bf00      	nop
 80005d0:	080007bc 	.word	0x080007bc
 80005d4:	080007bc 	.word	0x080007bc
 80005d8:	080007c4 	.word	0x080007c4
 80005dc:	080007bc 	.word	0x080007bc

080005e0 <__register_exitproc>:
 80005e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e4:	4c25      	ldr	r4, [pc, #148]	; (800067c <__register_exitproc+0x9c>)
 80005e6:	6825      	ldr	r5, [r4, #0]
 80005e8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80005ec:	4606      	mov	r6, r0
 80005ee:	4688      	mov	r8, r1
 80005f0:	4692      	mov	sl, r2
 80005f2:	4699      	mov	r9, r3
 80005f4:	b3cc      	cbz	r4, 800066a <__register_exitproc+0x8a>
 80005f6:	6860      	ldr	r0, [r4, #4]
 80005f8:	281f      	cmp	r0, #31
 80005fa:	dc18      	bgt.n	800062e <__register_exitproc+0x4e>
 80005fc:	1c43      	adds	r3, r0, #1
 80005fe:	b17e      	cbz	r6, 8000620 <__register_exitproc+0x40>
 8000600:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8000604:	2101      	movs	r1, #1
 8000606:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 800060a:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 800060e:	fa01 f200 	lsl.w	r2, r1, r0
 8000612:	4317      	orrs	r7, r2
 8000614:	2e02      	cmp	r6, #2
 8000616:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800061a:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 800061e:	d01e      	beq.n	800065e <__register_exitproc+0x7e>
 8000620:	3002      	adds	r0, #2
 8000622:	6063      	str	r3, [r4, #4]
 8000624:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8000628:	2000      	movs	r0, #0
 800062a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <__register_exitproc+0xa0>)
 8000630:	b303      	cbz	r3, 8000674 <__register_exitproc+0x94>
 8000632:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000636:	f3af 8000 	nop.w
 800063a:	4604      	mov	r4, r0
 800063c:	b1d0      	cbz	r0, 8000674 <__register_exitproc+0x94>
 800063e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000642:	2700      	movs	r7, #0
 8000644:	e880 0088 	stmia.w	r0, {r3, r7}
 8000648:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800064c:	4638      	mov	r0, r7
 800064e:	2301      	movs	r3, #1
 8000650:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000654:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8000658:	2e00      	cmp	r6, #0
 800065a:	d0e1      	beq.n	8000620 <__register_exitproc+0x40>
 800065c:	e7d0      	b.n	8000600 <__register_exitproc+0x20>
 800065e:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000662:	430a      	orrs	r2, r1
 8000664:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8000668:	e7da      	b.n	8000620 <__register_exitproc+0x40>
 800066a:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800066e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000672:	e7c0      	b.n	80005f6 <__register_exitproc+0x16>
 8000674:	f04f 30ff 	mov.w	r0, #4294967295
 8000678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800067c:	080007a0 	.word	0x080007a0
 8000680:	00000000 	.word	0x00000000

08000684 <register_fini>:
 8000684:	4b02      	ldr	r3, [pc, #8]	; (8000690 <register_fini+0xc>)
 8000686:	b113      	cbz	r3, 800068e <register_fini+0xa>
 8000688:	4802      	ldr	r0, [pc, #8]	; (8000694 <register_fini+0x10>)
 800068a:	f7ff bf6b 	b.w	8000564 <atexit>
 800068e:	4770      	bx	lr
 8000690:	00000000 	.word	0x00000000
 8000694:	0800076d 	.word	0x0800076d

08000698 <__call_exitprocs>:
 8000698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800069c:	4b31      	ldr	r3, [pc, #196]	; (8000764 <__call_exitprocs+0xcc>)
 800069e:	b083      	sub	sp, #12
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80006a8:	4681      	mov	r9, r0
 80006aa:	460e      	mov	r6, r1
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	9b00      	ldr	r3, [sp, #0]
 80006b0:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
 80006b4:	b327      	cbz	r7, 8000700 <__call_exitprocs+0x68>
 80006b6:	f8dd a004 	ldr.w	sl, [sp, #4]
 80006ba:	687c      	ldr	r4, [r7, #4]
 80006bc:	1e65      	subs	r5, r4, #1
 80006be:	d40e      	bmi.n	80006de <__call_exitprocs+0x46>
 80006c0:	3401      	adds	r4, #1
 80006c2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80006c6:	f04f 0800 	mov.w	r8, #0
 80006ca:	b1e6      	cbz	r6, 8000706 <__call_exitprocs+0x6e>
 80006cc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80006d0:	42b3      	cmp	r3, r6
 80006d2:	d018      	beq.n	8000706 <__call_exitprocs+0x6e>
 80006d4:	3d01      	subs	r5, #1
 80006d6:	1c6b      	adds	r3, r5, #1
 80006d8:	f1a4 0404 	sub.w	r4, r4, #4
 80006dc:	d1f5      	bne.n	80006ca <__call_exitprocs+0x32>
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <__call_exitprocs+0xd0>)
 80006e0:	b173      	cbz	r3, 8000700 <__call_exitprocs+0x68>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d136      	bne.n	8000756 <__call_exitprocs+0xbe>
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d034      	beq.n	8000758 <__call_exitprocs+0xc0>
 80006ee:	4638      	mov	r0, r7
 80006f0:	f8ca 3000 	str.w	r3, [sl]
 80006f4:	f3af 8000 	nop.w
 80006f8:	f8da 7000 	ldr.w	r7, [sl]
 80006fc:	2f00      	cmp	r7, #0
 80006fe:	d1dc      	bne.n	80006ba <__call_exitprocs+0x22>
 8000700:	b003      	add	sp, #12
 8000702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6822      	ldr	r2, [r4, #0]
 800070a:	3b01      	subs	r3, #1
 800070c:	42ab      	cmp	r3, r5
 800070e:	bf0c      	ite	eq
 8000710:	607d      	streq	r5, [r7, #4]
 8000712:	f8c4 8000 	strne.w	r8, [r4]
 8000716:	2a00      	cmp	r2, #0
 8000718:	d0dc      	beq.n	80006d4 <__call_exitprocs+0x3c>
 800071a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800071e:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8000722:	2101      	movs	r1, #1
 8000724:	40a9      	lsls	r1, r5
 8000726:	4219      	tst	r1, r3
 8000728:	d108      	bne.n	800073c <__call_exitprocs+0xa4>
 800072a:	4790      	blx	r2
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	455b      	cmp	r3, fp
 8000730:	d1bd      	bne.n	80006ae <__call_exitprocs+0x16>
 8000732:	f8da 3000 	ldr.w	r3, [sl]
 8000736:	42bb      	cmp	r3, r7
 8000738:	d0cc      	beq.n	80006d4 <__call_exitprocs+0x3c>
 800073a:	e7b8      	b.n	80006ae <__call_exitprocs+0x16>
 800073c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000740:	4219      	tst	r1, r3
 8000742:	d104      	bne.n	800074e <__call_exitprocs+0xb6>
 8000744:	4648      	mov	r0, r9
 8000746:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800074a:	4790      	blx	r2
 800074c:	e7ee      	b.n	800072c <__call_exitprocs+0x94>
 800074e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8000752:	4790      	blx	r2
 8000754:	e7ea      	b.n	800072c <__call_exitprocs+0x94>
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	46ba      	mov	sl, r7
 800075a:	461f      	mov	r7, r3
 800075c:	2f00      	cmp	r7, #0
 800075e:	d1ac      	bne.n	80006ba <__call_exitprocs+0x22>
 8000760:	e7ce      	b.n	8000700 <__call_exitprocs+0x68>
 8000762:	bf00      	nop
 8000764:	080007a0 	.word	0x080007a0
 8000768:	00000000 	.word	0x00000000

0800076c <__libc_fini_array>:
 800076c:	b538      	push	{r3, r4, r5, lr}
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <__libc_fini_array+0x24>)
 8000770:	4d08      	ldr	r5, [pc, #32]	; (8000794 <__libc_fini_array+0x28>)
 8000772:	1aed      	subs	r5, r5, r3
 8000774:	10ac      	asrs	r4, r5, #2
 8000776:	bf18      	it	ne
 8000778:	18ed      	addne	r5, r5, r3
 800077a:	d005      	beq.n	8000788 <__libc_fini_array+0x1c>
 800077c:	3c01      	subs	r4, #1
 800077e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8000782:	4798      	blx	r3
 8000784:	2c00      	cmp	r4, #0
 8000786:	d1f9      	bne.n	800077c <__libc_fini_array+0x10>
 8000788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800078c:	f000 b810 	b.w	80007b0 <_fini>
 8000790:	080007c4 	.word	0x080007c4
 8000794:	080007c8 	.word	0x080007c8

08000798 <_exit>:
 8000798:	e7fe      	b.n	8000798 <_exit>
 800079a:	bf00      	nop
 800079c:	00000043 	.word	0x00000043

080007a0 <_global_impure_ptr>:
 80007a0:	20000010                                ... 

080007a4 <_init>:
 80007a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a6:	bf00      	nop
 80007a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007aa:	bc08      	pop	{r3}
 80007ac:	469e      	mov	lr, r3
 80007ae:	4770      	bx	lr

080007b0 <_fini>:
 80007b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b2:	bf00      	nop
 80007b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007b6:	bc08      	pop	{r3}
 80007b8:	469e      	mov	lr, r3
 80007ba:	4770      	bx	lr
